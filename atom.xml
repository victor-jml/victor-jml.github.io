<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  <subtitle>保持独立 适当拥有</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-18T07:25:31.526Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Enoch_oahz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 154. MinArray(Easy)</title>
    <link href="http://yoursite.com/2020/08/18/LeetCode-154-MinArray/"/>
    <id>http://yoursite.com/2020/08/18/LeetCode-154-MinArray/</id>
    <published>2020-08-18T07:19:49.000Z</published>
    <updated>2020-08-18T07:25:31.526Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  </p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/" target="_blank" rel="noopener">LeetCode练习</a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[3,4,5,1,2]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[2,2,2,0,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>根据题意我们可以得知在进行数组的旋转之前这是一个<strong>递增数组</strong>并且<strong>可能含有重复数字</strong>.</p><p>最容易想到的方法:</p><h4 id="1-暴力法"><a href="#1-暴力法" class="headerlink" title="1. 暴力法"></a>1. 暴力法</h4><p>我们从数组的第一个元素开始进行遍历将前后进行对比,如果<code>numbers[left]</code> &gt; <code>numbers[right]</code>则已经出现转折(前后分别是两个不同的<strong>可能</strong>递增的数组).此时right就是我们要找的最小的元素下标.返回<code>numbers[right]</code>即可.也有可能全部数组都是重复的一个数字,我们在进行遍历结束后都没有找到符合条件的<code>numbers[left]</code>&gt;<code>numbers[right]</code>我们就直接返回数组的一个数(默认下标为0的数)</p><h4 id="2-二分法"><a href="#2-二分法" class="headerlink" title="2. 二分法"></a>2. 二分法</h4><p>我们在进行传统的二分查找时候,数组必须是要<strong>有序</strong>的,因为此时我们才能对于一个数进行对比后判断要找的数在它的左区间或者右区间.以便减少查找的次数.</p><p>而在本题中其实是满足的二分法的(因为在分界处两边都是单调的数组),我们需要找的就是找到这个分界处.</p><p>例如示例1中:</p><p>​    我们取2个下标<code>left</code>,<code>right</code>(默认为第一个和最后一个),然后得到中间下标<code>mid</code>(<code>mid = left + (right - left)/2</code>)—这里有个小细节:我们得到中间的数不是用的(left + right)/2 因为这样当<code>left</code>和<code>right</code>很大的时候相加会出现溢出. 其实后面除以2 我更愿意改成 &gt;&gt; 1 因为位运算更快.)所以进行一个循环条件是(left &lt; right)</p><ol><li>当<code>number[mid]</code> &gt;<code>number[right]</code>的时候说明<code>mid</code>前面是一个递增的,临界处在<code>mid</code>的右边,将<code>left</code>指针移动到<code>mid+1</code>处</li><li>当<code>number[mid]</code> &lt; <code>number[right]</code>的时候说明<code>mid</code>右边是一个递增的,临界处在<code>mid</code>的左边,所以将<code>right</code>指针指向<code>mid</code>处即可</li><li>当<code>number[mid]</code> = <code>number[right]</code> 的时候说明数组里面有重复的数字,我们不清楚临界处是在<code>mid</code>的左边还是右边,我们需要做的是将<code>right--</code>即可.</li></ol><p>最后返回<code>number[right]</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="1-暴力法-1"><a href="#1-暴力法-1" class="headerlink" title="1. 暴力法"></a>1. 暴力法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left = i;</span><br><span class="line">            <span class="keyword">int</span> right = left + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(right == numbers.length) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(numbers[left] &gt; numbers[right])&#123;</span><br><span class="line">                res = right;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[res];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-二分法-1"><a href="#2-二分法-1" class="headerlink" title="2. 二分法"></a>2. 二分法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(numbers[i] &lt; numbers[j] || numbers.length == <span class="number">1</span>) <span class="keyword">return</span> numbers[i];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = i + (j - i)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(numbers[mid] &lt;= numbers[j])&#123;</span><br><span class="line">                j = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid] &gt; numbers[j])&#123;</span><br><span class="line">                i = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[j];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/study/Java/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之图(Graph)</title>
    <link href="http://yoursite.com/2020/08/15/%E5%9B%BE-Graph/"/>
    <id>http://yoursite.com/2020/08/15/图-Graph/</id>
    <published>2020-08-15T10:45:23.000Z</published>
    <updated>2020-08-15T10:47:00.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>简单来说，图是一种用来表示相连数据的数据结构，类似我们的社交网络，图中有很多的节点，每个节点代表一个数据，每个节点可以和其他节点相连。其中每个节点叫做顶点（vertice）,连接顶点之间的线叫做相连线（edge）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i2.wp.com/turingplanet.org/wp-content/uploads/2020/04/Graph1.jpg?resize=300%2C300&ssl=1" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>在此图中，我们含有5个顶点和6条相连线，每个顶点包含了人名，而连接线代表相连人名之间是朋友关系。如果我们要更正式地表示图，那么图就可以用一对（V，E）集合来表示，其中V是一堆顶点的集合，而E是一堆相连线的集合</p><p>V = {a,b,c,d,e} E={ab,ac,,bd,cd,de}</p><p>上述是无向图</p><p>图的分类有三种:</p><ul><li><p>无向图</p></li><li><p>有向图</p></li><li><p>权重图</p><p><code>无向图</code>比较容易理解,连线没有方向,<code>有向图</code>则是存在连线方向的(可以理解成账号之间的关注问题,若A指向B,则表示A关注了B,若B也关注了A,则存在双向箭头),而<code>权重图</code>则是连线之间有值(可以理解成朋友之间的亲密度值). 其中<code>有向图</code>使用的比较多.</p></li></ul><h3 id="有向图的表示"><a href="#有向图的表示" class="headerlink" title="有向图的表示"></a>有向图的表示</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i2.wp.com/turingplanet.org/wp-content/uploads/2020/04/Graph5.png?resize=201%2C213&ssl=1" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>每行代表相应的顶点，如果M[i][j] = 1，那么就代表顶点 i 连向 j，如果是0，则表达顶点间没有联系.</p><ul><li>优点:可以很清楚的知道两个顶点是否相连</li><li>缺点:因为我们要浪费很多空间来保存没有关联的两个点的信息.用矩阵实现的时间复杂度很高，我们需要O(V^2)来记录所有的数据</li></ul><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><p>针对邻接矩阵的缺点,我们可以采用邻接表的方式来只保存有关系的两个点(通过链表实现)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i0.wp.com/turingplanet.org/wp-content/uploads/2020/04/Graph6.png?resize=425%2C166&ssl=1" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Java实现代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/15 14:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 图的实现(链表)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListGraph</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; graphs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListGraph</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        graphs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val; i++) &#123;</span><br><span class="line">            graphs.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        graphs.get(start).add(end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeEdge</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        graphs.get(start).remove((Integer) end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有向图的实现很简单，我们直接使用<code>Java</code>中的<code>ArrayList</code>来代表左侧的数组和数组上的链表，其中两个重要方法<code>addEdge</code>和<code>removeEdge</code>直接使用<code>ArrayList</code>自带的方法add和remove即可。使用链表的形式来实现图，我们可以只记录有用的数据，省下了很多空间</p><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>图的遍历方式有两种,一种是深度优先搜索（Depth-first Search），另一种是宽度优先搜索（Breadth-first search）</p><h4 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS(深度优先搜索)"></a>DFS(深度优先搜索)</h4><p>图的深度优先搜索跟树的先序遍历很类似.在深度优先遍历中，我们假设初始状态所有顶点都没被访问，然后从每一顶点v出发，先访问该顶点，然后依次从它的各个未被访问的邻接点出发，深度优先遍历图，直到图中所有和v相通的顶点都被访问到。若遍历完后，还有其他顶点没被访问到，则另选一个未被访问的顶点作为起始点，重复上述过程，直到所有顶点都被访问完为止</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i1.wp.com/turingplanet.org/wp-content/uploads/2020/04/Graph8.png?resize=249%2C242&ssl=1" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>具体的遍历顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">访问A</span><br><span class="line">访问B（在访问A之后，接下来应该访问的是A出发的另一个顶点，既顶点B）</span><br><span class="line">访问C（在访问B之后，接下来访问的是从B出发的另一个顶点，既C，E，F。在此图中，我们按照字母排序顺序访问，因此先访问C。）</span><br><span class="line">访问E（接下来访问与C连接的另一个顶点E。）</span><br><span class="line">访问D（接下来访问从E出发的顶点B和D，因为B已被访问过，所以访问顶点D。）</span><br><span class="line">访问F（接下来回溯“访问A的另一个连接顶点F”）</span><br><span class="line">访问G</span><br></pre></td></tr></table></figure><h4 id="BFS-广度优先搜索"><a href="#BFS-广度优先搜索" class="headerlink" title="BFS(广度优先搜索)"></a>BFS(广度优先搜索)</h4><p>广度优先搜索算法也叫做“宽度优先搜索”或“横向优先搜索”,它跟树的层次遍历有些类似,其方法是从图中的某一顶点v出发，在访问了v之后依次访问v的各个没有访问到的邻接点，然后分别从这些邻接点出发依次访问他们的邻接点，使得先被访问的顶点的邻接点先与后被访问顶点的邻接点被访问，直到图中所有已被访问的顶点的邻接点都被访问到。如果此时图中尚有顶点未被访问，则需要另选一个未曾被访问到的顶点作为新的起始点，重复上述过程，直至图中所有顶点都被访问到为止。换句话说，广度优先搜索遍历图的过程是以v为起点，由近至远，依次访问和v有路径相通且路径长度为1，2，…的顶点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i1.wp.com/turingplanet.org/wp-content/uploads/2020/04/Graph9.png?fit=1024%2C743&ssl=1" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>具体的遍历顺序:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">访问A</span><br><span class="line">访问B</span><br><span class="line">依次访问C，E，F（在B被访问之后，接下来访问B的邻接点，既C，E，F。）</span><br><span class="line">依次访问D，G（在访问完C，E，F之后，再依次访问他们出发的另一个顶点。还是按照C，E，F的顺序访问，C的已经全部访问过了，那么就只剩下E，E；先访问E的邻接点D，再访问F的邻接点G。</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.enoch.algorithm.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/15 14:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 图的遍历(DFS,BFS)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphTraversal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ListGraph graph;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历过的值</span></span><br><span class="line">    <span class="keyword">boolean</span>[] visited;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GraphTraversal</span><span class="params">(ListGraph listGraph)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.graph = listGraph;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[listGraph.graphs.size()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.graphs.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">                DFSTraversal(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.graphs.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">                BFSTraversal(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFSTraversal</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否访问过</span></span><br><span class="line">        <span class="keyword">if</span>(visited[v]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//将该点加入已访问的boolean数组中</span></span><br><span class="line">        visited[v] = <span class="keyword">true</span>;</span><br><span class="line">        System.out.print(v + <span class="string">"-&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过listIterator遍历拿到该节点的相邻节点集合</span></span><br><span class="line">        Iterator&lt;Integer&gt; neighbors = graph.graphs.get(v).listIterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (neighbors.hasNext())&#123;</span><br><span class="line">            <span class="comment">// 循环遍历该节点的相邻节点并递归访问</span></span><br><span class="line">            <span class="keyword">int</span> nextNode = neighbors.next();</span><br><span class="line">            <span class="keyword">if</span>(!visited[nextNode])&#123;</span><br><span class="line">                DFSTraversal(nextNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BFSTraversal</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[v]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 创建一个双向队列来保存某节点的相邻节点</span></span><br><span class="line">        <span class="comment">// 使用队列的原因是因为一个节点的相邻节点比下一个节点的相邻节点要先访问(符合 队列的先进先出)</span></span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        visited[v] = <span class="keyword">true</span>;</span><br><span class="line">        queue.addFirst(v);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            Integer cur = queue.pollFirst();</span><br><span class="line">            System.out.print(cur + <span class="string">"-&gt;"</span>);</span><br><span class="line">            Iterator&lt;Integer&gt; neighbors = graph.graphs.get(cur).listIterator();</span><br><span class="line">            <span class="keyword">while</span> (neighbors.hasNext())&#123;</span><br><span class="line">                Integer nextNode = neighbors.next();</span><br><span class="line">                <span class="comment">// 每一次访问该节点后把该节点的相邻节点 添加到队列的尾部</span></span><br><span class="line">                <span class="keyword">if</span>(!visited[nextNode])&#123;</span><br><span class="line">                    queue.offerLast(nextNode);</span><br><span class="line">                    visited[nextNode] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListGraph listGraph = <span class="keyword">new</span> ListGraph(<span class="number">8</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">4</span>,<span class="number">7</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">        listGraph.addEdge(<span class="number">6</span>,<span class="number">3</span>);</span><br><span class="line">        GraphTraversal graphTraversal = <span class="keyword">new</span> GraphTraversal(listGraph);</span><br><span class="line">        graphTraversal.BFS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/study/Java/"/>
    
    
      <category term="Graph" scheme="http://yoursite.com/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 105. buildTree(Medium)</title>
    <link href="http://yoursite.com/2020/08/13/LeetCode-105-buildTree/"/>
    <id>http://yoursite.com/2020/08/13/LeetCode-105-buildTree/</id>
    <published>2020-08-13T10:15:02.000Z</published>
    <updated>2020-08-13T10:16:01.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>该是出自剑指Offer</p><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><h3 id="在线练习"><a href="#在线练习" class="headerlink" title="在线练习"></a>在线练习</h3><p>LeetCode : <a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/</a></p><p>牛客网: <a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;&amp;tqId=11157&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;&amp;tqId=11157&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前序遍历 preorder = [3,9,20,15,7]</span><br><span class="line">中序遍历 inorder = [9,3,15,20,7]</span><br></pre></td></tr></table></figure><p>返回的二叉树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>根据前序遍历的性质，第一个元素必然就是root，那么下面的工作就是如何确定root的左右子树的范围</p><p>根据中序遍历的性质，root元素前面都是root的左子树，后面都是root的右子树.那么我们只要找到中序遍历中root的位置，就可以确定好左右子树的范围</p><p>而我们每次就可以通过前序中序之间的关系确定:</p><ul><li><p>前序: 根节点–左子树–右子树</p></li><li><p>中序: 左子树–根节点–右子树</p><p>每一次递归的结束条件就是前序序列是否为空或者长度为1.</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 17:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 重建二叉树(前序和中序数组)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 前序遍历序列&#123;1,2,4,7,3,5,6,8&#125; 和 中序遍历序列&#123;4,7,2,1,5,3,8,6&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReConstructBinaryTreeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre,<span class="keyword">int</span>[] in)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断当前序遍历的数列为空时</span></span><br><span class="line">        <span class="keyword">if</span>(pre.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取前序遍历的第一个数(因为前序遍历的第一个数一定是根节点的值)</span></span><br><span class="line">        <span class="keyword">int</span> rootVal = pre[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果数组长度为1,则只存在根节点直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(pre.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line"></span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取根节点在中序遍历中的下标</span></span><br><span class="line">        <span class="keyword">int</span> rootIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; in.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rootVal == in[i])&#123;</span><br><span class="line">                rootIndex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只需要将确定的左右子树安到root上即可.递归要注意出口</span></span><br><span class="line">        <span class="comment">//这里注意Arrays.copyOfRange(int[],start,end)是[)的区间</span></span><br><span class="line">        root.left = reConstructBinaryTree(Arrays.copyOfRange(pre,<span class="number">1</span>,rootIndex+<span class="number">1</span>),Arrays.copyOfRange(in,<span class="number">0</span>,rootIndex));</span><br><span class="line">        root.right = reConstructBinaryTree(Arrays.copyOfRange(pre,rootIndex+<span class="number">1</span>, pre.length),Arrays.copyOfRange(in,rootIndex+<span class="number">1</span>,in.length));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="BinaryTree" scheme="http://yoursite.com/tags/BinaryTree/"/>
    
  </entry>
  
  <entry>
    <title>手撕快速排序(QuickSort)</title>
    <link href="http://yoursite.com/2020/08/13/%E6%89%8B%E6%92%95%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-QuickSort/"/>
    <id>http://yoursite.com/2020/08/13/手撕快速排序-QuickSort/</id>
    <published>2020-08-13T08:33:30.000Z</published>
    <updated>2020-08-13T08:34:01.524Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>快速排序其实是对冒泡排序的一种改进.<strong>通过每一趟排序将要排序的数放在合适的位置,并且将要排序的数据分为两部分(其中一部分均比该数小,另一部分均比该数大)</strong>.然后再不断的对两部分数据进行排序</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 14:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 快速排序</span></span><br><span class="line"><span class="comment"> *              时间复杂度O(nlogn)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        quickSort(array,<span class="number">0</span>,array.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = array[start];</span><br><span class="line">            <span class="keyword">int</span> i = start;</span><br><span class="line">            <span class="keyword">int</span> j = end;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当i == j时退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">                <span class="comment">//找到第一个下标j的数小于index,否则j--</span></span><br><span class="line">                <span class="keyword">while</span>(array[j] &gt;= index &amp;&amp; j &gt; i)&#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                    array[i] = array[j];</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//找到第一个下标为i大于index的数,否则i++</span></span><br><span class="line">                <span class="keyword">while</span> (array[i] &lt;= index &amp;&amp; i &lt; j)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                    array[j] = array[i];</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                array[i] = index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将每一次排序后从已排好数的位置分为两部分再次排序</span></span><br><span class="line">            <span class="comment">//此时i的位置就是已排序数的位置(即分为start - i-1 和 i+1 - end)两部分</span></span><br><span class="line">            quickSort(array,start,i-<span class="number">1</span>);</span><br><span class="line">            quickSort(array,i+<span class="number">1</span>,end);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            System.out.print(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = &#123;<span class="number">5</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        QuickSort quickSort = <span class="keyword">new</span> QuickSort(num);</span><br><span class="line">        quickSort.sort();</span><br><span class="line">        quickSort.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/study/Java/"/>
    
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>Java三种代理模式</title>
    <link href="http://yoursite.com/2020/08/13/Java%E4%B8%89%E7%A7%8D%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/08/13/Java三种代理模式/</id>
    <published>2020-08-13T04:50:29.000Z</published>
    <updated>2020-08-13T04:52:35.889Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理(Proxy) 是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象. 这样做的好处: 在不改变目标对象的基础上,可以对目标对象进行功能的拓展</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/790334/201701/790334-20170116124522880-1137330008.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象<strong>一起实现相同的接口或者是继承相同父类</strong>.</p><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><p>定义一个接口<code>ISing</code>,在其中定义一个方法<code>sing()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 11:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个目标对象<code>Singer</code>实现该接口并且重写其<code>sing()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 11:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 接口实现,目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singer</span> <span class="keyword">implements</span> <span class="title">ISing</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"唱歌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再定义一个代理对象<code>StaticProxy</code>同时也实现<code>ISing</code>接口并重写<code>sing()</code>方法(加上新功能),然后通过调用代理对象来对目标对象进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 11:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 代理对象,静态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> <span class="keyword">implements</span> <span class="title">ISing</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//保存目标对象</span></span><br><span class="line">    <span class="keyword">private</span> ISing target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticProxy</span><span class="params">(ISing target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"唱歌前"</span>);</span><br><span class="line">        target.sing();</span><br><span class="line">        System.out.println(<span class="string">"唱歌后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类<code>Test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 目标对象</span></span><br><span class="line">        Singer singer = <span class="keyword">new</span> Singer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理对象,把目标对象传给代理对象,建立代理关系</span></span><br><span class="line">        StaticProxy staticProxy = <span class="keyword">new</span> StaticProxy(singer);</span><br><span class="line"></span><br><span class="line">        staticProxy.sing(); <span class="comment">//执行代理方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><ul><li>优点: <ul><li>可以做到在不修改目标对象的功能前提下,对目标功能扩展.</li></ul></li><li>缺点: <ul><li>因为<strong>代理对象需要与目标对象实现一样的接口</strong>,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护</li></ul></li></ul><h4 id="动态代理-JDK代理"><a href="#动态代理-JDK代理" class="headerlink" title="动态代理(JDK代理)"></a>动态代理(JDK代理)</h4><ul><li><p>动态代理相比静态代理,前者的代理对象可以不实现接口</p></li><li><p>代理对象的生成,是利用JDK的API,<strong>动态的在内存中构建代理对象</strong>(需要我们指定创建代理对象/目标对象实现的接口的类型)</p></li></ul><h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h6><p>接口的定义和目标对象实现接口 与 静态代理一样不需要改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 11:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 11:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 目标对象 实现接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singer</span> <span class="keyword">implements</span> <span class="title">ISing</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"唱歌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Java底层封装实现的细节. 直接调用Proxy类的静态方法<code>newProxyInstance</code>,该方法会返回代理对象</p><p><code>static</code> <code>Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h )</code></p><p>接收的三个参数依次为:</p><ul><li><code>ClassLoader loader：</code>指定当前目标对象使用类加载器，写法固定</li><li><code>Class&lt;?&gt;[] interfaces：</code>目标对象实现的接口的类型，写法固定</li><li><code>InvocationHandler h</code>：事件处理接口，需传入一个实现类，一般直接使用匿名内部类</li></ul><p>定义测试类<code>Test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 11:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试类(动态代理jdk)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        Singer target = <span class="keyword">new</span> Singer();</span><br><span class="line">        ISing proxy = (ISing) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"向观众问好"</span>);</span><br><span class="line">                        <span class="comment">// 执行目标对象方法</span></span><br><span class="line">                        Object returnValue = method.invoke(target,args);</span><br><span class="line">                        System.out.println(<span class="string">"谢谢大家"</span>);</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        proxy.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h6><ul><li><p>优点:</p><ul><li>由于Java封装了<code>newProxyInstance</code>这个方法的实现细节,我们使用起来会非常的方便</li></ul></li><li><p>缺点:</p><ul><li>可以看出静态代理和JDK代理有一个共同的缺点，就是<strong>目标对象必须实现一个或多个接口</strong>，如何没有接口实现，则可以使用<code>Cglib</code>代理</li></ul></li></ul><h4 id="Cglib代理-子类代理"><a href="#Cglib代理-子类代理" class="headerlink" title="Cglib代理(子类代理)"></a>Cglib代理(子类代理)</h4><h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h5><ul><li>需要引入<code>cglib</code>的jar文件，由于Spring的核心包中已经包括了<code>Cglib</code>功能，所以也可以直接引入spring核心包</li><li>目标类不能为<code>final</code></li><li>目标对象的方法如果为<code>final</code>/<code>static</code>，那么就不会被拦截，即不会执行目标对象额外的业务方法</li></ul><h5 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h5><p>目标对象(不需要实现接口)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 12:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 目标对象(不需要实现接口 )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"唱歌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Cglib</code>代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 12:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Cglib子类代理工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CglibProxy</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给目标对象创建一个代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.工具类</span></span><br><span class="line">        Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 2.设置父类</span></span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">// 3.设置回调函数</span></span><br><span class="line">        en.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 4.创建子类</span></span><br><span class="line">        <span class="keyword">return</span> en.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"向观众问好"</span>);</span><br><span class="line">        Object returnValue = method.invoke(target,objects);</span><br><span class="line">        System.out.println(<span class="string">"谢谢大家"</span>);</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/13 12:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 目标对象</span></span><br><span class="line">        Singer target = <span class="keyword">new</span> Singer();</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        Singer proxy = (Singer) <span class="keyword">new</span> CglibProxy(target).getProxyInstance();</span><br><span class="line">        <span class="comment">// 执行代理对象的方法</span></span><br><span class="line">        proxy.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>三种代理模式各有优缺点和相应的适用范围 例如: </p><ul><li>静态代理和动态代理(JDK代理)都需要实现接口,但是动态代理中由于Java封装了实现的细节,所以我们只需要调用<code>Proxy</code>类中的<code>newProxyInstance</code>静态方法即可,而静态代理是需要我们手动实现代理类的细节</li><li>动态代理与Cglib代理的区别,主要看目标对象是否实现了接口</li></ul><p>在Spring框架中选择的代理模式(在Spring的AOP编程中):</p><ul><li>如果加入容器的目标对象有实现接口，用JDK代理</li><li>如果目标对象没有实现接口，用Cglib代理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Java学习系列之多线程</title>
    <link href="http://yoursite.com/2020/08/12/Java%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/08/12/Java学习系列之多线程/</id>
    <published>2020-08-12T03:16:52.000Z</published>
    <updated>2020-08-13T04:51:44.328Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>进程  是<strong>资源(CPU,内存)分配的基本单位</strong>,是程序执行的一个实例,程序运行时就会创建一个实例,并为它们分配资源,然后把进程放入进程就绪队列中,进程调度器为其分配CPU时间,程序就会执行.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="..\imgs\image-20200812091927092.png" alt="image-20200812091927092" title>                </div>                <div class="image-caption">image-20200812091927092</div>            </figure><p>线程  是<strong>程序最小的执行单位</strong>,它是一个进程的执行流,是CPU调度和分配的基本单位,一个进程可以由多个线程组成,线程间共享进程的所有资源,<strong>每个线程有自己的堆栈和局部变量</strong>. 线程由CPU独立调度运行 在多CPU环境下就允许多个线程同时运行,同样多线程也可以实现并发操作,每个请求分配一个线程来处理.</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><p>进程是资源分配的最小单位，线程是程序执行的最小单位</p></li><li><p>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多</p></li><li><p>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点</p></li><li><p>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间</p></li><li><p>Threads help with both problems. Threads are sometimes called lightweight processes since a thread is “lighter weight” than a process. That is, thread creation can be 10–100 times faster than process creation.</p></li><li><p>All threads within a process share the same global memory. This makes the sharing of information easy between the threads, but along with this simplicity comes the problem</p><p>​                                                                                                                                                                        ——–《Unix网络编程》</p></li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多线程目的就是为了更好的利用CPU资源. 先搞清楚一些概念:</p><ul><li><p>多线程: 指一个进程运行时产生了不止一个线程</p></li><li><p>并行并发:</p><ul><li>并行: 多个CPU实例或者多台机器同时执行一段处理逻辑,<strong>真正的同时</strong></li><li>并发: 通过CPU调度算法,让用户们看上去同时执行,实际上从CPU操作层面上不是真正的同时</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1689841-f622a468b2694253.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li><p>线程安全: 指在并发的情况之下，该代码经过多线程使用，线程的调度顺序不影响任何结果</p></li><li><p>同步: Java中的同步指的是通过人为的控制和调度，<strong>保证共享资源的多线程访问成为线程安全</strong>，来保证结果的准确 <strong>线程安全的优先级大于性能</strong></p></li></ul><h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><p>线程的状态</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1689841-af3e5b75b44e972c.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt title>                </div>                <div class="image-caption"></div>            </figure><p>线程的状态转换</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1689841-383f7101e6588094.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt title>                </div>                <div class="image-caption"></div>            </figure><p>线程在Running状态下可能会遇到阻塞(Blocked)情况</p><pre><code>1. 线程调用john()或者sleep()方法后变成了阻塞状态(Blocked),当sleep()时间结束或者被打断,john()中断,IO完成都会使其从阻塞状态变为Runnable2. 线程调用wait(),与此同时释放同步锁,使该线程处于等待池中(wait blocked pool),直到notify()或者notifyAll(), 线程会恢复锁同时被唤醒被放到锁定池(lock blocked pool )，释放同步锁使线程回到可运行状态(Runnable)3. 对Running状态的线程加同步锁(Synchronized)使其进入(lock blocked pool),同步锁被释放进入可运行状态(Runnable)</code></pre><h4 id="每个对象的方法-机制"><a href="#每个对象的方法-机制" class="headerlink" title="每个对象的方法(机制)"></a>每个对象的方法(机制)</h4><p>synchronized, wait, notify 是任何对象都具有的同步工具</p><p>Monitor:  Java中的每个对象都有一个监视器，来监测并发代码的重入. 在非多线程编码时该监视器不发挥作用，反之如果在synchronized 范围内，监视器发挥作用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1689841-a8720771d68cb2ba.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong><code>wait/notify</code>必须存在于<code>synchronized</code>块中</strong>  并且，这三个关键字针对的是同一个监视器(某对象的监视器) 这意味着<code>wait</code>之后，其他线程可以进入同步块执行</p><p>(如果当<code>wait/notify</code>方法没有在<code>synchronized</code>块中调用的话以及在该<code>synchroized</code>中调用其他对象的<code>wait/notify</code>都会因为当某代码并不持有监视器的使用权而抛出<code>java.lang.IllegalMonitorStateException</code>)</p><p>Synchronized的用法:</p><ul><li><p>代码块:  在多线程环境下，<code>synchronized</code>块中的方法获取了lock实例的monitor，如果实例相同，那么只有一个线程能执行该块内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/12 10:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Object lock;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="comment">//do somesthing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方法:  相当于上面代码中用lock来锁定的效果，实际获取的是ThreadDemo02类的monitor 更进一步，如果修饰的是static方法，则锁定该类所有实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>经典实例: 生产者消费者问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者生产出来的产品交给店员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.product &gt;= MAX_PRODUCT)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">try</span></span><br><span class="line">          &#123;</span><br><span class="line">              wait();  </span><br><span class="line">              System.out.println(<span class="string">"产品已满,请稍候再生产"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span>(InterruptedException e)</span><br><span class="line">          &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.product++;</span><br><span class="line">      System.out.println(<span class="string">"生产者生产第"</span> + <span class="keyword">this</span>.product + <span class="string">"个产品."</span>);</span><br><span class="line">      notifyAll();   <span class="comment">//通知等待区的消费者可以取出产品了</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 消费者从店员取产品</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.product &lt;= MIN_PRODUCT)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">try</span> </span><br><span class="line">          &#123;</span><br><span class="line">              wait(); </span><br><span class="line">              System.out.println(<span class="string">"缺货,稍候再取"</span>);</span><br><span class="line">          &#125; </span><br><span class="line">          <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">          &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"消费者取走了第"</span> + <span class="keyword">this</span>.product + <span class="string">"个产品."</span>);</span><br><span class="line">      <span class="keyword">this</span>.product--;</span><br><span class="line">      notifyAll();   <span class="comment">//通知等待去的生产者可以生产产品了</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>手撕归并排序(MERGE-SORT)</title>
    <link href="http://yoursite.com/2020/08/05/%E6%89%8B%E6%92%95%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-MERGE-SORT/"/>
    <id>http://yoursite.com/2020/08/05/手撕归并排序-MERGE-SORT/</id>
    <published>2020-08-05T08:28:44.000Z</published>
    <updated>2020-08-13T08:34:08.955Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p><strong>归并排序(MERGE-SORT)</strong> 该算法运用到 <strong>分治</strong>思想</p><p>所谓分治:</p><p><strong>分</strong> 就是将问题分成一系列小的问题然后<code>递归</code>求解</p><p><strong>治</strong> 就是将各阶段的答案进行修补在一起</p><h3 id="分-divide"><a href="#分-divide" class="headerlink" title="分(divide)"></a>分(divide)</h3><p>分阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n.</p><p>我们对于一个数组例如<code>{3,1,4,5,2,7,8,1}</code>,我们先进行<code>分</code>操作:<br>将长度为<code>n</code>的数组分成两个长度为<code>n/2</code>的数组(假设<code>start</code>和<code>end</code>分别代表各数组的第一个元素和最后一个元素)</p><p>我们在不断递归进行拆分数组的时候,终止条件就是当(<code>start &gt;= end</code>)—反过来也就是当(<code>start &lt; end</code>)执行递归拆分</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">        sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>,temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        sort(arr,start,mid,temp);</span><br><span class="line">        sort(arr,mid+<span class="number">1</span>,end,temp);</span><br><span class="line">        merge(arr,start,mid,end,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合-merge"><a href="#合-merge" class="headerlink" title="合(merge)"></a>合(merge)</h3><p>我们在进行merge操作的时候,是对不同的部分进行合并排序,我们需要利用一个额外temp数组将两个不同部分进行比较依次放入<code>temp</code>数组中.例如:</p><p>在我们拆分到不可再分的时候(同样是对于一个数组例如<code>{3,1,4,5,2,7,8,1}</code>)</p><p><code>{3,1}</code>,我们需要把它们进行比较然后放入<code>temp</code>数组中,然后将临时数组<code>temp</code>放回原始数组<code>arr</code>中去</p><p>同样的对于<code>{4,5}</code>也是上述同样的操作. 这两步操作完后<code>arr</code>数组中已经对<code>{3,1,4,5}</code>已经排好序.剩下的就是对原始数组的右半部分进行分合排序</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> end,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt;= arr[j])&#123;</span><br><span class="line">                temp[cur++] = arr[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[cur++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid)&#123;  <span class="comment">//将左边剩余元素填充进temp中</span></span><br><span class="line">            temp[cur++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= end)&#123;  <span class="comment">//将右序列剩余元素填充进temp中</span></span><br><span class="line">            temp[cur++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end)&#123;  <span class="comment">//将temp中的元素全部拷贝到原数组中</span></span><br><span class="line">            arr[start++] = temp[cur++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>借鉴一下网上一张图来直观说明大致流程</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://picb.zhimg.com/v2-2958d4f3d9dd9156f1b5dca6788fe8a7_r.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>完整代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/5 14:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">        sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>,temp); <span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            sort(arr,start,mid,temp); <span class="comment">//左边归并排序，使得左子序列有序</span></span><br><span class="line">            sort(arr,mid+<span class="number">1</span>,end,temp); <span class="comment">//右边归并排序，使得右子序列有序</span></span><br><span class="line">            merge(arr,start,mid,end,temp); <span class="comment">//将两个有序子数组合并操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> end,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt;= arr[j])&#123;</span><br><span class="line">                temp[cur++] = arr[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[cur++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid)&#123;  <span class="comment">//将左边剩余元素填充进temp中</span></span><br><span class="line">            temp[cur++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= end)&#123;  <span class="comment">//将右序列剩余元素填充进temp中</span></span><br><span class="line">            temp[cur++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end)&#123;  <span class="comment">//将temp中的元素全部拷贝到原数组中</span></span><br><span class="line">            arr[start++] = temp[cur++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">31</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">2312</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 2, 3, 5, 6, 31, 45, 2312]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/study/Java/"/>
    
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 240. FindNumberIn2DArray(Easy)(剑指Offer 04)</title>
    <link href="http://yoursite.com/2020/08/03/LeetCode-240-FindNumberIn2DArray-%E5%89%91%E6%8C%87Offer-04/"/>
    <id>http://yoursite.com/2020/08/03/LeetCode-240-FindNumberIn2DArray-剑指Offer-04/</id>
    <published>2020-08-03T11:17:07.000Z</published>
    <updated>2020-08-03T11:18:15.756Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><p>在一个 <code>n</code> * <code>m</code>的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>现有矩阵 matrix 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>给定 target = <code>5</code>，返回 <code>true</code>。</p><p>给定 target = <code>20</code>，返回 <code>false</code>。</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>0 &lt;= n &lt;= 1000</p><p>0 &lt;= m &lt;= 1000</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>我们要从一个二维数组的里面找是否存在某一特定值<code>target</code>, 因为该二维数组存在一个规律:</p><ul><li>每一行从左到右递增的顺序排序</li><li>每一列从上到下递增的顺序排列</li></ul><p>从这个规律中我们可以得出几个结论:</p><ol><li>左上角的值是每一行<strong>最小</strong>同时也是每一列<strong>最小</strong>的</li><li>右上角的值是每一行<strong>最大</strong>的同时是每一列<strong>最小</strong>的</li><li>左下角的值是每一行<strong>最小</strong>同时也是每一列<strong>最大</strong>的</li><li>右下角的值是每一行<strong>最大</strong>的同时是每一列<strong>最大</strong>的</li></ol><p>我们比较值可以从这四个角度去当作入口进入数组进行比较.但是其中<strong>左上</strong>和<strong>右下</strong>的值都是同为最小或者最大,导致我们进行判定<code>matrix[i][j]</code>与<code>target</code>大小关系<br>时. 例如:</p><p><code>matrix[i][j] &gt; target</code><br>我们就可以判断该target 不在该二维数组中</p><p>而当<code>matrix[i][j] &lt; target</code>时就剩下右边和下方以及重叠区域需要进行判断会很复杂</p><p>所以我们选择<strong>右上或者左下的值当作入口</strong>进行判断.<br>当<code>matrix[i][j] &gt; target</code> 时,我们就可以排除当前列(因为该值为当前列的最小值).</p><p>当<code>matrix[i][j] &lt; target</code>时,我们就可以排除当前行(因为该值为当前值的最大值)</p><p>这样一来我们每一次进行比较就可以排除一行或者一列直到找到是否存在.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] col = matrix[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = n-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j] &gt; target) n--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 120. MinimunTotal(Medium)</title>
    <link href="http://yoursite.com/2020/07/26/LeetCode-120-MinimunTotal/"/>
    <id>http://yoursite.com/2020/07/26/LeetCode-120-MinimunTotal/</id>
    <published>2020-07-26T15:57:59.000Z</published>
    <updated>2020-07-27T03:22:26.039Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p><p><strong>相邻的结点</strong> 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>例如，给定三角形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">     [2],</span><br><span class="line">    [3,4],</span><br><span class="line">   [6,5,7],</span><br><span class="line">  [4,1,8,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>DP(自底向上)</strong></p><p>DP数组,我们需要开辟<code>n+1</code>x<code>m+1</code>的大小.此时的<code>m</code>和<code>n</code>分别为给定List的大小即:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int m = triangle.size();</span><br><span class="line">        int n = triangle.get(m-1).size();</span><br><span class="line">        int[][] dp = new int[n+1][m+1];</span><br></pre></td></tr></table></figure><p>然后并初始化最下层为0 也就是<code>dp[n][i]</code> (<code>i</code> : <code>0-m</code>) 即:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//初始化第n层均为0</span><br><span class="line">        for(int i = 0;i &lt;= n;i++)&#123;</span><br><span class="line">            dp[m][i] = 0;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>因为我们是从顶向上进行求解的.我们在得出dp状态转换方程为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = min(dp[i+1][j],dp[i+1][j+1]) + nums[i][j]</span><br></pre></td></tr></table></figure><p><code>dp[i][j]</code> 表示从点 (i, j)(i,j) 到底边的最小路径和</p><p>这种解法相比自顶向下的递归有一个好处就是不需要在最后的时候查找最小值而是直接返回dp[0][0]就可以了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>DP(自底向上)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(triangle == <span class="keyword">null</span> || triangle.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = triangle.size();</span><br><span class="line">        <span class="keyword">int</span> n = triangle.get(m-<span class="number">1</span>).size();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化第m层均为0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            dp[m][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m-<span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= i;j++)&#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>]) + triangle.get(i).get(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前只把自己懂的一种解法写出来了,还在研究其他大佬的解法.在后面会更新.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 70. ClimbStairs(Easy)</title>
    <link href="http://yoursite.com/2020/07/25/LeetCode-70-ClimbStairs/"/>
    <id>http://yoursite.com/2020/07/25/LeetCode-70-ClimbStairs/</id>
    <published>2020-07-25T15:59:36.000Z</published>
    <updated>2020-08-13T10:17:01.553Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><h3 id="在线练习"><a href="#在线练习" class="headerlink" title="在线练习"></a>在线练习</h3><p>LeetCode: <a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/climbing-stairs/</a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>递归法</strong></p><p>很明显当<code>n&lt;=2</code>的时候即爬到第一层第二层有几种方法均为n种,所以我们在最开始进行判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(n &lt;= 2) return n;</span><br></pre></td></tr></table></figure><p>如果<code>n&gt;2</code>的话,在爬到n层楼梯需要的方法数是爬到n-1层的方法数<code>+</code>爬到n-2层需要的方法数.即:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int res = climbStairs(n-1)+climbStairs(n-2);</span><br></pre></td></tr></table></figure><p>但是这道题用递归是TLE了.所以我们需要进行优化.</p><p><strong>递归法</strong> <code>+</code> <strong>备忘录算法</strong></p><p>因为我们在递归的时候总是会重复计算值,试想当这个<code>n</code>很大的时候重复计算的次数会不断增加.所以我们在进行递归的时候需要进行保存计算过的值(可以用HashMap,HashSet或者数组等等).</p><p>这里我们开一个数组,数组的长度为<code>n+1</code>,在每次递归的时候对<code>num[n]</code>的值进行判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(nums[n] &gt; 0)</span><br></pre></td></tr></table></figure><p>如果<code>nums[n]</code>的值大于0则返回<code>nums[n]</code>否则进行递归求值赋给<code>nums[n]</code>然后再返回<code>nums[n]</code></p><p><strong>动态规划</strong></p><p>动态规划就是将一个问题划分成多个子问题.爬第n阶楼梯的方法数量等于 2 部分之和:</p><ol><li>爬上 <code>n-1</code> 阶楼梯的方法数量.因为再爬1阶就能到第n阶</li><li>爬上 <code>n-2</code> 阶楼梯的方法数量,因为再爬2阶就能到第n阶<br>公式<code>nums[n] = nums[n-1] + nums[n-2]</code> (n &gt; 2)</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>递归法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> climbStairs(n-<span class="number">1</span>)+climbStairs(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归法</strong> <code>+</code> <strong>备忘录算法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> calculate(n,nums);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(nums[n] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[n];</span><br><span class="line">        &#125;</span><br><span class="line">            nums[n] = calculate(n-<span class="number">1</span>,nums) + calculate(n-<span class="number">2</span>,nums);</span><br><span class="line">            <span class="keyword">return</span> nums[n];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态规划</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> calculate(n,nums);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        nums[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            nums[i] = nums[i-<span class="number">1</span>] + nums[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题在LeetCode上是属于Easy难度的,也是练习DP的第一道题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Java学习系列之容器</title>
    <link href="http://yoursite.com/2020/07/25/Java%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2020/07/25/Java学习系列之容器/</id>
    <published>2020-07-25T12:59:12.000Z</published>
    <updated>2020-07-25T13:02:13.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-概览"><a href="#一-概览" class="headerlink" title="一.概览"></a>一.概览</h2><p>容器主要包括<code>Collection</code>和<code>Map</code>两种,<code>Collection</code>存储着对象集合而<code>Map</code>存储着键值对(两个对象)的映射表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/549734/201609/549734-20160920135339059-1268675998.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1.Set"></a>1.Set</h3><ul><li><p><code>TreeSet</code>:基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 <code>O(1)</code>，<code>TreeSet</code> 则为 <code>O(logN)</code></p></li><li><p><code>HashSet</code>:基于哈希表实现,支持快速查找,但不支持有序性操作.并且失去了元素的插入顺序信息,也就是说使用 <code>Iterator</code> 遍历 <code>HashSet</code> 得到的结果是不确定的</p></li><li><p><code>LinkedHashSet</code>:具有 <code>HashSet</code> 的查找效率,并且内部使用双向链表维护元素的插入顺序</p></li></ul><h3 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h3><ul><li><code>ArrayList</code>: 基于动态数组实现,支持随机访问</li><li><code>Vector</code>: 和ArrayList类似,是线程安全的</li><li><code>LinkedList</code>: 基于双向链表实现的,只能顺序访问,但是可以快速地在链表中间插入和删除元素.LinkedList 还可以用作栈、队列和双向队列.</li></ul><h3 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3.Queue"></a>3.Queue</h3><ul><li><code>LinkedList</code>：可以用它来实现双向队列.</li><li><code>PriorityQueue</code>：基于堆结构实现，可以用它来实现优先队列.</li></ul><h3 id="4-Map"><a href="#4-Map" class="headerlink" title="4.Map"></a>4.Map</h3><ul><li><p><code>TreeMap</code>：基于红黑树实现.</p></li><li><p><code>HashMap</code>：基于哈希表实现.</p></li><li><p><code>HashTable</code>：和 <code>HashMap</code> 类似,但它是线程安全的,这意味着同一时刻多个线程同时写入 <code>HashTable</code> 不会导致数据不一致.它是遗留类,不应该去使用它,而是使用 <code>ConcurrentHashMap</code> 来支持线程安全，<code>ConcurrentHashMap</code> 的效率会更高，因为 <code>ConcurrentHashMap</code> 引入了分段锁。</p></li><li><p>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序.</p></li></ul><h2 id="二-源码分析"><a href="#二-源码分析" class="headerlink" title="二.源码分析"></a>二.源码分析</h2><p>以下源码分析基于 JDK 1.8</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="1-概览"><a href="#1-概览" class="headerlink" title="1.概览"></a>1.概览</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    // minCapacity is usually close to size, so this is a win:</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-扩容"><a href="#2-扩容" class="headerlink" title="2.扩容"></a>2.扩容</h4><p>添加元素时使用 <code>ensureCapacityInternal()</code> 方法来保证容量足够,如果不够时,需要使用 <code>grow()</code> 方法进行扩容,新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code> 也就是旧容量的 1.5 倍.</p><p><strong>分析</strong>:</p><ol><li><p>把数组的长度赋给oldCapacity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int oldCapacity = elementData.length;</span><br></pre></td></tr></table></figure></li><li><p>新的数组容量=老的数组长度的1.5倍.<code>oldCapacity &gt;&gt; 1</code> 相当于除以2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br></pre></td></tr></table></figure></li></ol><p>(这里补一下位运算的知识)</p><p><strong>位运算</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/25/aSrm8O.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="3"><li>如果新的数组容量<code>newCapacity</code>小于传入的参数要求的最小容量<code>minCapacity</code>,那么新的数组容量以传入的容量参数为准<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">newCapacity = minCapacity;</span><br></pre></td></tr></table></figure></li></ol><p>4.如果新的数组容量<code>newCapacity</code>大于数组能容纳的最大元素个数 <code>MAX_ARRAY_SIZE</code> (2^{31}-1-8)<br>那么再判断传入的参数<code>minCapacity</code>是否大于<code>MAX_ARRAY_SIZE</code>,如果<code>minCapacity</code>大于<code>MAX_ARRAY_SIZE</code>,那么<code>newCapacity</code>等于<code>Integer.MAX_VALUE</code>,否者<code>newCapacity</code>等于<code>MAX_ARRAY_SIZE</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">newCapacity = hugeCapacity(minCapacity);</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>需要调用 <code>System.arraycopy()</code> 将 <code>index+1</code> 后面的元素都复制到 <code>index</code> 位置上，该操作的时间复杂度为 O(N)，可以看到 <code>ArrayList</code> 删除元素的代价是非常高的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public E remove(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to let GC do its work</span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-序列化"><a href="#4-序列化" class="headerlink" title="4.序列化"></a>4.序列化</h4><p>ArrayList 基于数组实现,并且具有动态扩容特性,因此保存元素的数组不一定都会被使用,那么就没必要全部进行序列化</p><p>保存元素的数组 <code>elementData</code> 使用 <code>transient</code> 修饰,该关键字声明数组默认不会被序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] elementData; // non-private to simplify nested class access</span><br></pre></td></tr></table></figure><p>ArrayList 实现了<code>writeObject()</code> 和 <code>readObject()</code> 来控制只序列化数组中有元素填充那部分内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private void readObject(java.io.ObjectInputStream s)</span><br><span class="line">    throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    // Read in size, and any hidden stuff</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    // Read in capacity</span><br><span class="line">    s.readInt(); // ignored</span><br><span class="line"></span><br><span class="line">    if (size &gt; 0) &#123;</span><br><span class="line">        // be like clone(), allocate array based upon size not capacity</span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        // Read in all elements in the proper order.</span><br><span class="line">        for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">    throws java.io.IOException&#123;</span><br><span class="line">    // Write out element count, and any hidden stuff</span><br><span class="line">    int expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    // Write out size as capacity for behavioural compatibility with clone()</span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    // Write out all elements in the proper order.</span><br><span class="line">    for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (modCount != expectedModCount) &#123;</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化时需要使用 <code>ObjectOutputStream</code> 的 <code>writeObject()</code> 将对象转换为字节流并输出.而 <code>writeObject()</code> 方法在传入的对象存在 <code>writeObject()</code> 的时候会去反射调用该对象的 <code>writeObject()</code> 来实现序列化.反序列化使用的是 <code>ObjectInputStream</code> 的 <code>readObject()</code> 方法，原理类似.</p><h3 id="后续待更新"><a href="#后续待更新" class="headerlink" title="后续待更新"></a>后续待更新</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Container" scheme="http://yoursite.com/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>Java学习系列之Obejct通用方法</title>
    <link href="http://yoursite.com/2020/07/24/Java%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8BObejct%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/07/24/Java学习系列之Obejct通用方法/</id>
    <published>2020-07-24T02:29:56.000Z</published>
    <updated>2020-07-24T02:44:18.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>Object通用方法有:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public native int hashCode()</span><br><span class="line"></span><br><span class="line">public boolean equals(Object obj)</span><br><span class="line"></span><br><span class="line">protected native Object clone() throws CloneNotSupportedException</span><br><span class="line"></span><br><span class="line">public String toString()</span><br><span class="line"></span><br><span class="line">public final native Class&lt;?&gt; getClass()</span><br><span class="line"></span><br><span class="line">protected void finalize() throws Throwable &#123;&#125;</span><br><span class="line"></span><br><span class="line">public final native void notify()</span><br><span class="line"></span><br><span class="line">public final native void notifyAll()</span><br><span class="line"></span><br><span class="line">public final native void wait(long timeout) throws InterruptedException</span><br><span class="line"></span><br><span class="line">public final void wait(long timeout, int nanos) throws InterruptedException</span><br><span class="line"></span><br><span class="line">public final void wait() throws InterruptedException</span><br></pre></td></tr></table></figure><h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><ol><li>等价与相等<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer x = new Integer(1);</span><br><span class="line">Integer y = new Integer(1);</span><br><span class="line">System.out.println(x.equals(y)); // true</span><br><span class="line">System.out.println(x == y);      // false</span><br></pre></td></tr></table></figure></li></ol><ul><li>对于基本类型,由于没有<code>equals()</code>方法,就使用<code>==</code>来进行判断值是否相等</li><li>对于引用类型,<code>==</code>是判断两个变量是否引用同一个对象,而<code>equals()</code>是判断两个变量的值是否相等</li></ul><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><p><code>hashCode()</code> 返回哈希值，而 <code>equals()</code> 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价，这是因为计算哈希值具有随机性，两个值不同的对象可能计算出相同的哈希值。</p><p>在覆盖 <code>equals()</code> 方法时应当总是覆盖 <code>hashCode()</code> 方法，保证等价的两个对象哈希值也相等</p><p><code>HashSet</code> 和 <code>HashMap</code> 等集合类使用了 <code>hashCode()</code> 方法来计算对象应该存储的位置，因此要将对象添加到这些集合类中，需要让对应的类实现 <code>hashCode()</code> 方法</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>默认返回 <code>ToStringExample@4554617c</code> 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示</p><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><h4 id="1-cloneable"><a href="#1-cloneable" class="headerlink" title="1.cloneable"></a>1.cloneable</h4><p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class CloneExample &#123;</span><br><span class="line">    private int a;</span><br><span class="line">    private int b;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public CloneExample clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return (CloneExample)super.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CloneExample e1 = new CloneExample();</span><br><span class="line">try &#123;</span><br><span class="line">    CloneExample e2 = e1.clone();</span><br><span class="line">&#125; catch (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上抛出了 <code>CloneNotSupportedException</code>，这是因为 CloneExample 没有实现 Cloneable 接口。</p><p>应该注意的是，clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 <code>CloneNotSupportedException</code></p><h4 id="2-浅拷贝"><a href="#2-浅拷贝" class="headerlink" title="2.浅拷贝"></a>2.浅拷贝</h4><p>拷贝对象和原始对象的引用类型引用同一个对象</p><ul><li>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。因为是两份不同的数据，所以对其中一个对象的该成员变量值进行修改，不会影响另一个对象拷贝得到的数据</li><li>对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值</li></ul><h4 id="3-深拷贝"><a href="#3-深拷贝" class="headerlink" title="3.深拷贝"></a>3.深拷贝</h4><p>拷贝对象和原始对象的引用类型引用不同对象</p><p>深拷贝对引用数据类型的成员变量的对象图中所有的对象都开辟了内存空间；而浅拷贝只是传递地址指向，新的对象并没有对引用数据类型创建内存空间</p><h4 id="4-clone-的替代方案"><a href="#4-clone-的替代方案" class="headerlink" title="4.clone() 的替代方案"></a>4.clone() 的替代方案</h4><p>使用 <code>clone()</code> 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 <code>clone()</code>，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="ObjectMethod" scheme="http://yoursite.com/tags/ObjectMethod/"/>
    
  </entry>
  
  <entry>
    <title>Java学习系列之关键词(final和static)</title>
    <link href="http://yoursite.com/2020/07/17/Java%E5%85%B3%E9%94%AE%E5%AD%97-final%E5%92%8Cstatic/"/>
    <id>http://yoursite.com/2020/07/17/Java关键字-final和static/</id>
    <published>2020-07-17T03:26:42.000Z</published>
    <updated>2020-07-24T02:31:49.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一-final"><a href="#一-final" class="headerlink" title="一. final"></a>一. final</h3><h4 id="1-数据"><a href="#1-数据" class="headerlink" title="1. 数据"></a>1. 数据</h4><p>声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。</p><ul><li>对于基本类型，final 使数值不变；</li><li>对于引用类型，final使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final int x = 1;</span><br><span class="line">// x = 2;  // cannot assign value to final variable &apos;x&apos;</span><br><span class="line">final A y = new A();</span><br><span class="line">y.a = 1;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h4><p>声明方法不能被子类重写。</p><p><code>private</code> 方法<strong>隐式</strong>地被指定为 <code>final</code>，如果在子类中定义的方法和基类中的一个 <code>private</code> 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</p><h4 id="3-类"><a href="#3-类" class="headerlink" title="3. 类"></a>3. 类</h4><p>声明类不允许被继承。</p><h3 id="二-static"><a href="#二-static" class="headerlink" title="二. static"></a>二. static</h3><h4 id="1-静态变量"><a href="#1-静态变量" class="headerlink" title="1. 静态变量"></a>1. 静态变量</h4><ul><li>静态变量: 又称<strong>类变量</strong>,意思是这个变量是属于类的,类所有的实例都共享静态变量，可以直接通过类名来访问它.静态变量在内存中只存在一份.</li><li>实例变量: 每创建一个实例就会产生一个实例变量.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line"></span><br><span class="line">    private int x;         // 实例变量</span><br><span class="line">    private static int y;  // 静态变量</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // int x = A.x;  // Non-static field &apos;x&apos; cannot be referenced from a static context</span><br><span class="line">        A a = new A();</span><br><span class="line">        int x = a.x;</span><br><span class="line">        int y = A.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2. 静态方法"></a>2. 静态方法</h4><p>静态方法在类加载的时候就存在了，它不依赖于任何实例.<strong>所以静态方法必须有实现</strong>，也就是说它不能是抽象方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public abstract class A &#123;</span><br><span class="line">    public static void func1()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    // public abstract static void func2();  // Illegal combination of modifiers: &apos;abstract&apos; and &apos;static&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只能访问所属类的静态字段和静态方法，方法中不能有 <code>this</code> 和 <code>super</code> 关键字，因此这两个关键字与具体对象关联。</p><p>Q:为什么静态方法不能调用非静态变量，非静态方法可以引用静态变量?</p><p>A:理由很简单，静态方法不属于对象，是属于类的，是不需要实例化的，而非静态变量是属于对象的，需要先实例化。在一个类的静态成员中去访问其非静态成员之所以会出错是因为在类的非静态成员不存在的时候类的静态成员就已经存在了，访问一个内存中不存在的东西当然会出错.</p><h5 id="抽象类-抽象方法"><a href="#抽象类-抽象方法" class="headerlink" title="抽象类,抽象方法"></a>抽象类,抽象方法</h5><p>(关于抽象类,抽象方法:</p><p>当父类的某些方法不确定时，可以用<code>abstract</code>关键字来修饰该方法[抽象方法]，用<code>abstract</code>来修饰该类[抽象类].</p><p>父类是将子类所共同拥有的属性和方法进行抽取，这些属性和方法中，有的是已经明确实现了的，有的还无法确定，那么我们就可以将其定义成抽象，在后日子类进行重用，进行具体化.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 这就是一个抽象类</span><br><span class="line">abstract class Animal &#123;</span><br><span class="line">    String name;</span><br><span class="line">    int age;</span><br><span class="line"></span><br><span class="line">    // 动物会叫</span><br><span class="line">    public abstract void cry(); // 不确定动物怎么叫的。定义成抽象方法，来解决父类方法的不确定性。抽象方法在父类中不能实现，所以没有函数体。但在后续在继承时，要具体实现此方法。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 抽象类可以被继承</span><br><span class="line">// 当继承的父类是抽象类时，需要将抽象类中的所有抽象方法全部实现。</span><br><span class="line">class cat extends Animal &#123;</span><br><span class="line">    // 实现父类的cry抽象方法</span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;猫叫:&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是:</p><ol><li>必须是抽象类才能拥有抽象方法</li><li>抽象方法在被子类继承的时候必须要实现(全部抽象方法)</li><li>抽象类不能被实例化</li></ol><p>)</p><h4 id="3-静态语句块"><a href="#3-静态语句块" class="headerlink" title="3. 静态语句块"></a>3. 静态语句块</h4><p>静态语句块只在类初始化的时候运行一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A a1 = new A();</span><br><span class="line">        A a2 = new A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">only print 1 time</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h4 id="4-静态内部类"><a href="#4-静态内部类" class="headerlink" title="4. 静态内部类"></a>4. 静态内部类</h4><p>非静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。而静态内部类不需要.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class OuterClass &#123;</span><br><span class="line"></span><br><span class="line">    class InnerClass &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class StaticInnerClass &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // InnerClass innerClass = new InnerClass(); // &apos;OuterClass.this&apos; cannot be referenced from a static context</span><br><span class="line">        OuterClass outerClass = new OuterClass();</span><br><span class="line">        InnerClass innerClass = outerClass.new InnerClass();</span><br><span class="line">        StaticInnerClass staticInnerClass = new StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态内部类不能访问外部类的非静态的变量和方法</strong></p><h4 id="5-初始化顺序"><a href="#5-初始化顺序" class="headerlink" title="5. 初始化顺序"></a>5. 初始化顺序</h4><p>静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static String staticField = &quot;静态变量&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    System.out.println(&quot;静态语句块&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String field = &quot;实例变量&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public InitialOrderTest() &#123;</span><br><span class="line">    System.out.println(&quot;构造函数&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果存在继承关系的时候,初始化顺序为:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">父类（静态变量、静态语句块）</span><br><span class="line">子类（静态变量、静态语句块）</span><br><span class="line">父类（实例变量、普通语句块）</span><br><span class="line">父类（构造函数）</span><br><span class="line">子类（实例变量、普通语句块）</span><br><span class="line">子类（构造函数）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="关键词" scheme="http://yoursite.com/tags/%E5%85%B3%E9%94%AE%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 145. postorderTraversal(Hard)</title>
    <link href="http://yoursite.com/2020/07/14/LeetCode-145-postorderTraversal/"/>
    <id>http://yoursite.com/2020/07/14/LeetCode-145-postorderTraversal/</id>
    <published>2020-07-14T13:54:32.000Z</published>
    <updated>2020-08-05T09:40:53.799Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉树，返回它的 <strong>后序</strong> 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure><p><strong>进阶</strong>:递归算法很简单，你可以通过迭代算法完成吗？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>常规思路</p><ol><li>递归</li><li>迭代</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Recursion</span></span><br><span class="line">    <span class="comment">// public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</span></span><br><span class="line">    <span class="comment">//     List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">    <span class="comment">//     if(root == null) return res;</span></span><br><span class="line">    <span class="comment">//     Recursion(root,res);</span></span><br><span class="line">    <span class="comment">//     return res;</span></span><br><span class="line">    <span class="comment">// &#125;   </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// public void Recursion(TreeNode root,List&lt;Integer&gt; res)&#123;</span></span><br><span class="line">    <span class="comment">//     if(root.left != null)  Recursion(root.left,res);</span></span><br><span class="line">    <span class="comment">//     if(root.right != null)  Recursion(root.right,res);</span></span><br><span class="line">    <span class="comment">//     res.add(root.val);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Iteration</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode target = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">           <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">               stack.push(root);</span><br><span class="line">               root = root.left;</span><br><span class="line">           &#125;</span><br><span class="line">           root = stack.peek();</span><br><span class="line">           <span class="keyword">if</span>(root.right == <span class="keyword">null</span> || target == root.right)&#123;</span><br><span class="line">               root = stack.pop();</span><br><span class="line">               res.add(root.val);</span><br><span class="line">               target = root;</span><br><span class="line">               root = <span class="keyword">null</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               root = root.right;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="BinaryTree" scheme="http://yoursite.com/tags/BinaryTree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 94. inorderTraversal(Medium)</title>
    <link href="http://yoursite.com/2020/07/14/LeetCode-94-inorderTraversal/"/>
    <id>http://yoursite.com/2020/07/14/LeetCode-94-inorderTraversal/</id>
    <published>2020-07-14T13:53:29.000Z</published>
    <updated>2020-07-31T04:12:02.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉树，返回它的 <strong>中序</strong> 遍历</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">输出: [1,3,2]</span><br></pre></td></tr></table></figure><p><strong>进阶</strong>:递归算法很简单，你可以通过迭代算法完成吗？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>常规思路</p><ol><li>递归</li><li>迭代</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.Recursion</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Recursion(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Recursion</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>) Recursion(cur.left,res);</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>) Recursion(cur.right,res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Iteration</span></span><br><span class="line">    <span class="comment">// public List&lt;Integer&gt; inorderTraversal(TreeNode root)&#123;</span></span><br><span class="line">    <span class="comment">//     List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//     if(root == null) return res;</span></span><br><span class="line">    <span class="comment">//     Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//     while(root != null || !stack.isEmpty())&#123;</span></span><br><span class="line">    <span class="comment">//         if(root != null)&#123;</span></span><br><span class="line">    <span class="comment">//             stack.push(root);</span></span><br><span class="line">    <span class="comment">//             root = root.left;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//         else&#123;</span></span><br><span class="line">    <span class="comment">//             root = stack.pop();</span></span><br><span class="line">    <span class="comment">//             res.add(root.val);</span></span><br><span class="line">    <span class="comment">//             root = root.right;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     return res;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="BinaryTree" scheme="http://yoursite.com/tags/BinaryTree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 144. preorderTraversal(Medium)</title>
    <link href="http://yoursite.com/2020/07/14/LeetCode-144-preorderTraversal/"/>
    <id>http://yoursite.com/2020/07/14/LeetCode-144-preorderTraversal/</id>
    <published>2020-07-14T13:52:38.000Z</published>
    <updated>2020-07-31T03:59:09.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉树，返回它的 <strong>前序</strong>遍历</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,2,3]</span><br></pre></td></tr></table></figure><p><strong>进阶</strong>:递归算法很简单，你可以通过迭代算法完成吗？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>基本思想</p><ol><li>递归遍历(Recursion)</li><li>迭代遍历(Iteration)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Recursion</span></span><br><span class="line">    <span class="comment">// public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123;</span></span><br><span class="line">    <span class="comment">//     List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//     if(root == null) return res;</span></span><br><span class="line">    <span class="comment">//     Recursion(root,res);</span></span><br><span class="line">    <span class="comment">//     return res;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// public void Recursion(TreeNode cur,List&lt;Integer&gt; res)&#123;</span></span><br><span class="line">    <span class="comment">//     res.add(cur.val);</span></span><br><span class="line">    <span class="comment">//     if(cur.left != null) Recursion(cur.left,res);</span></span><br><span class="line">    <span class="comment">//     if(cur.right != null) Recursion(cur.right,res);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Iteration</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                res.add(root.val);</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="BinaryTree" scheme="http://yoursite.com/tags/BinaryTree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 206. ReverseList (Medium)</title>
    <link href="http://yoursite.com/2020/07/14/LeetCode-206-ReverseList/"/>
    <id>http://yoursite.com/2020/07/14/LeetCode-206-ReverseList/</id>
    <published>2020-07-14T13:40:48.000Z</published>
    <updated>2020-07-14T14:00:11.961Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>反转一个单链表。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>迭代法</strong> <code>+</code> <strong>双指针</strong></p><p>在循环中需要做的事是要将当前节点指向前一个节点,所以就需要定义两个指针<code>cur</code> <code>pre</code>分别表示当前节点和前继节点.<br>与此同时我们还需要在循环中用一个next来保存cur的后继节点避免出现节点丢失</p><p><strong>Time complexity</strong> <code>O(n)</code><br><strong>Space complexity</strong> <code>O(1)</code></p><p><strong>递归法</strong></p><p>递归反转链表相比迭代是有一定的难度的<br>我们需要明确这个函数的作用是什么:<br><code>参数为头指针,反转链表后返回翻转后的链表</code></p><p>最难理解的是比如:<br>4和5需要反转, 4-&gt;5 此时的cur是4,需要将<code>cur.next.next = cur</code> 将5的next指向4</p><p>图下是我在LeetCode讨论区找到一个gif方便理解:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.leetcode-cn.com/dacd1bf55dec5c8b38d0904f26e472e2024fc8bee4ea46e3aa676f340ba1eb9d-%E9%80%92%E5%BD%92.gif" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>Time complexity</strong> <code>O(n)</code><br><strong>Space complexity</strong> <code>O(n)</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>迭代法</strong> <code>+</code> <strong>双指针</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseListIterate</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode next = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseListRecursion</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode temp = reverseListRecursion(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>反转链表这个题最主要的还是递归方法的难以理解, 这也是递归经典题.在以后还是需要多加练习多总结才能帮助理解.</p><p>后面还要<code>反转链表前n项</code> 以及 <code>反转链表部分项</code> 等类似的题就更新到下一篇文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="LinkedList" scheme="http://yoursite.com/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 26. RemoveDuplicates (Easy)</title>
    <link href="http://yoursite.com/2020/06/30/LeetCode_26_%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://yoursite.com/2020/06/30/LeetCode_26_删除排序数组中的重复项/</id>
    <published>2020-06-30T02:55:24.000Z</published>
    <updated>2020-07-14T13:46:03.664Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p><strong>不要使用额外的数组空间</strong>，你必须在 <strong>原地</strong> 修改输入数组 并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例一:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>示例二:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>双指针法</code><br>定义慢指针<code>i</code>初始化为0 , 快指针<code>j</code>初始化为1.<br>每一次遍历的时候,判断<code>nums[i]</code>与<code>nums[j]</code>是否相等,如果相等则j++.若不等则先<code>i++</code>然后将<code>nums[j]</code>赋值给<code>nums[i]</code></p><p><strong>Time complexity</strong> <code>O(n)</code><br><strong>Space complexity</strong> <code>O(1)</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; nums.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != nums[j])&#123;</span><br><span class="line">                nums[++i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2. Add Two Numbers (Medium)</title>
    <link href="http://yoursite.com/2020/06/29/LeetCode_2_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2020/06/29/LeetCode_2_两数相加/</id>
    <published>2020-06-29T03:19:42.000Z</published>
    <updated>2020-07-14T13:50:48.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出两个<strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照<strong>逆序</strong>的方式存储的，并且它们的每个节点只能存储<strong>一位</strong>数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 <code>0</code> 之外，这两个数都不会以 <strong>0</strong>开头。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为我们之后需要输出的是头节点,所以这里创建了虚拟头节点<code>res</code>用来最后输出,和当前节点<code>cur</code>用来进行两数相加操作</p><p>定义<code>carry</code>表示相加是否有进位,初始为<code>0</code></p><p><code>while</code>,判断的条件是两个链表的<code>-&gt;next</code>指针域是否为空</p><p>在循环体中,首先用了一个三元运算符 如果<code>l1</code>,<code>l2</code>不为空则将各自的<code>val</code>赋值给<code>n1</code> <code>n2</code>,否则赋值<code>0</code>;同时要判断是否有进位</p><p>在循环体结束后,判断最后一位是否有进位,如果有则在链表的最后加上值为<code>1</code>的结点.</p><p><strong>Time complexity</strong> <code>O(max(n,m))</code><br><strong>Space complexity</strong> <code>O(max(n,m))</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* res = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);  <span class="comment">//定义虚拟头节点</span></span><br><span class="line">        ListNode* cur = res;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1||l2)&#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = l1? l1-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> n2 = l2? l2-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = n1 + n2 + carry;</span><br><span class="line">            carry = sum/<span class="number">10</span>;</span><br><span class="line">            cur-&gt;next = <span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l1) l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2) l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry) cur-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>); <span class="comment">//在循环结束后如果有进位,则在最前面添加一个值为1的节点</span></span><br><span class="line">        <span class="keyword">return</span> res-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1. TwoSum (Easy)</title>
    <link href="http://yoursite.com/2020/06/28/LeetCode_1_%E4%B8%A4%E6%95%B0%E5%92%8C/"/>
    <id>http://yoursite.com/2020/06/28/LeetCode_1_两数和/</id>
    <published>2020-06-28T03:24:50.000Z</published>
    <updated>2020-07-14T13:50:21.447Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数数组 <code>nums</code>和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那<strong>两个</strong>整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>解法1:</p><p>一开始我脑海里能想到的就是暴力求解: 求和为<code>target</code>的两个整数,那么两次<code>for</code>循环 先在第一个循环里找第一个数然后在第二个循环数不断进行判断两个数之和是否等于<code>target</code><br>因为这里进行了嵌套使用了两个for循环</p><p>这样虽然节省空间,但是<strong>时间复杂度</strong>:<code>O(n²)</code></p><p>解法2:</p><p>随后想到用<code>unordered_map</code>进行一次遍历将数组里面的值与下标以<code>key:value</code>保存在<code>unordered_map</code>里面,然后再通过一次循环查看<code>target-nums.at(i)</code>的差值是否在hash_map里面存在,如果存在还要进行判断下标是否为i(是否已遍历),如果都满足<code>break</code>跳出循环,则将两个数的下标<code>index</code> <code>push_back</code>进<code>res</code>数组里.</p><p>这样使用到了<code>unordered_map</code>, <code>unordered_map</code>相当于<code>HashMap</code>。无论从查找、插入上来说，<code>unordered_map</code>的效率都优于<code>hash_map</code>，更优于<code>map</code></p><p><strong>Time complexity</strong> <code>O(n)</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>解法1: (暴力法)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//暴力法</span></span><br><span class="line">        <span class="keyword">int</span> leftNum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            leftNum = nums.at(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(leftNum + nums.at(j) == target)&#123;</span><br><span class="line">                    res.push_back(i);</span><br><span class="line">                    res.push_back(j);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解法2: (unordered_map)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//unordered_map</span></span><br><span class="line">        <span class="built_in">unordered_map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; numsMap;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            numsMap[nums.at(i)] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k = target-nums.at(i);</span><br><span class="line">            <span class="keyword">if</span>(numsMap.count(k) &amp;&amp; numsMap[k] != i)&#123;</span><br><span class="line">                res.push_back(i);</span><br><span class="line">                res.push_back(numsMap[k]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 566. Reshape the Matrix (Easy)</title>
    <link href="http://yoursite.com/2020/06/27/LeetCode_566_%E9%87%8D%E5%A1%91%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2020/06/27/LeetCode_566_重塑矩阵/</id>
    <published>2020-06-27T06:14:43.000Z</published>
    <updated>2020-07-14T13:51:13.716Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><p>在MATLAB中，有一个非常有用的函数 <code>reshape</code>，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。</p><p>给出一个由二维数组表示的矩阵，以及两个正整数<code>r</code>和<code>c</code>，分别表示想要的重构的矩阵的行数和列数。</p><p>重构后的矩阵需要将原始矩阵的所有元素以相同的<strong>行遍历顺序</strong>填充。</p><p>如果具有给定参数的<code>reshape</code>操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><p>获取<code>nums</code>的大小分别为:<code>nums.size()</code>以及<code>nums[0].size()</code></p><p>然后进行判断是否能够重塑另一个r<em>c的矩阵:`nums.size() * nums[0].size() ==? r</em>c<code>如果不相等则返回之前的矩阵</code>nums`.</p><p>如果相等则初始化一个矩阵<code>res</code>,然后通过<strong>行遍历顺序</strong>进行重新赋值</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">nums = </span><br><span class="line">[[1,2],</span><br><span class="line"> [3,4]]</span><br><span class="line">r = 1, c = 4</span><br><span class="line">输出: </span><br><span class="line">[[1,2,3,4]]</span><br><span class="line">解释:</span><br><span class="line">行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">nums = </span><br><span class="line">[[1,2],</span><br><span class="line"> [3,4]]</span><br><span class="line">r = 2, c = 4</span><br><span class="line">输出: </span><br><span class="line">[[1,2],</span><br><span class="line"> [3,4]]</span><br><span class="line">解释:</span><br><span class="line">没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><ol><li>给定矩阵的宽和高范围在 [1, 100]。</li><li>给定的 r 和 c 都是正数。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; matrixReshape(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; nums, <span class="keyword">int</span> r, <span class="keyword">int</span> c) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = nums[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(m*n != r*c) <span class="keyword">return</span> nums;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(r,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(c));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++)&#123;</span><br><span class="line">                res[i][j] = nums[x][y];</span><br><span class="line">                y++;</span><br><span class="line">                <span class="keyword">if</span>(y == m)&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                    y=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>283. Move Zeroes (Easy)</title>
    <link href="http://yoursite.com/2020/06/26/LeetCode_283_%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
    <id>http://yoursite.com/2020/06/26/LeetCode_283_移动零/</id>
    <published>2020-06-26T12:53:51.000Z</published>
    <updated>2020-06-29T06:36:50.054Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>遍历<code>nums</code>的同时判断<code>nums.at(i)</code>是否为<code>0</code>,如果是那么就删除这个值然后在数组的末尾<code>push_back</code>0进去<br>(tips:每进行删除然后<code>push_back</code>后不要将遍历变量<code>i++</code>,例如数组中<code>0-0-1</code>,第一项删除<code>0</code>后,变化后的<code>nums为&#39;0-1-0&#39;</code>,也就是第二次遍历后会判断为<code>1</code>而不是<code>0</code>,所以遍历变量不需要进行自增.而如果不为<code>0</code>,则进行<code>i++</code>)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.at(i)==<span class="number">0</span>)&#123;</span><br><span class="line">                nums.erase(nums.begin()+i);</span><br><span class="line">                nums.push_back(<span class="number">0</span>);</span><br><span class="line">                n--;</span><br><span class="line">            &#125;<span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; nums.at(i) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 724. Find Pivol Index (Easy)</title>
    <link href="http://yoursite.com/2020/06/26/LeetCode_724_%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2020/06/26/LeetCode_724_寻找数组的中心索引/</id>
    <published>2020-06-26T08:03:38.000Z</published>
    <updated>2020-07-14T13:50:57.840Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><p>给定一个整数类型的数组<code>nums</code>，请编写一个能够返回数组 “<strong>中心索引</strong>” 的方法。</p><p>我们是这样定义数组 <strong>中心索引</strong> 的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">nums = [1, 7, 3, 6, 5, 6]</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">索引 3 (nums[3] = 6) 的左侧数之和 (1 + 7 + 3 = 11)，与右侧数之和 (5 + 6 = 11) 相等。</span><br><span class="line">同时, 3 也是第一个符合要求的中心索引。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">nums = [1, 2, 3]</span><br><span class="line">输出：-1</span><br><span class="line">解释：</span><br><span class="line">数组中不存在满足此条件的中心索引。</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这里我们需要求的左边和以及右边的和进行比较,在进行遍历的时候对左边和进行求解是比较方便的.直接初始化<code>leftSum</code>=0,然后每次遍历之后可以+=进行累加求的<code>leftSum</code>.</p><p>最主要的还是通过<code>leftSum</code>求的<code>rightSum</code>(<code>rightSum</code> = <code>sum</code>(数组的和) - <code>num.at(i)</code> - <code>leftSum</code>) 每次循环先进行求的<code>rightSum</code> 然后与<code>leftSum</code>进行比较,如果相等则<code>return</code> 当前的次序<code>i</code>.直到数组遍历结束未找到左右和相等则返回<code>-1</code>.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rightSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            sum += nums.at(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            rightSum = sum-nums.at(i)-leftSum;</span><br><span class="line">            <span class="keyword">if</span>(rightSum == leftSum) <span class="keyword">return</span> i;</span><br><span class="line">            leftSum += nums.at(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1470. Shuffle the Array (Easy)</title>
    <link href="http://yoursite.com/2020/06/25/LeetCode_1470_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2020/06/25/LeetCode_1470_重新排列数组/</id>
    <published>2020-06-25T03:28:14.000Z</published>
    <updated>2020-07-14T13:50:56.998Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 <code>nums</code> ，数组中有 <code>2n</code> 个元素，按 <code>[x1,x2,...,xn,y1,y2,...,yn]</code> 的格式排列。</p><p>请你将数组按 <code>[x1,y1,x2,y2,...,xn,yn]</code> 格式重新排列，返回重排后的数组。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,5,1,3,4,7], n = 3</span><br><span class="line">输出：[2,3,5,4,1,7] </span><br><span class="line">解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,4,3,2,1], n = 4</span><br><span class="line">输出：[1,4,2,3,3,2,4,1]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2,2], n = 2</span><br><span class="line">输出：[1,2,1,2]</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这里新建一个<code>vector</code> <code>res</code>,然后通过一次循环i-&gt;<code>[0,n)</code><br>将<code>num[i]</code>以及<code>num[i+n]</code>插入到新建的res中 (这里<code>num[i]</code>与<code>num[i+n]</code>分别代表题干表示的x1,y1)<br>这样<code>res</code>中就保存了<code>x1,y1,x2,y2</code>等等..<br>然后<code>return</code> 就完事儿了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; shuffle(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            res.push_back(nums[i]);</span><br><span class="line">            res.push_back(nums[i+n]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1486. XOR Operation in an Array (Easy)</title>
    <link href="http://yoursite.com/2020/06/24/LeetCode_1486_%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2020/06/24/LeetCode_1486_数组异或运算/</id>
    <published>2020-06-24T02:36:39.000Z</published>
    <updated>2020-07-14T13:50:55.882Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><p>给你两个整数，<code>n</code> 和 <code>start</code> 。</p><p>数组 <code>nums</code> 定义为：<code>nums[i]</code> = <code>start</code> + <code>2*i</code>（下标从 0 开始）且 <code>n</code> == <code>nums.length</code> 。</p><p>请返回 <code>nums</code> 中所有元素按位异或（XOR）后得到的结果。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5, start = 0</span><br><span class="line">输出：8</span><br><span class="line">解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。</span><br><span class="line">     &quot;^&quot; 为按位异或 XOR 运算符。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, start = 3</span><br><span class="line">输出：8</span><br><span class="line">解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先得明白按位异或(XOR)是什么:</p><p>参与运算的两个值，==如果两个相应位相同，则结果为0==，否则为1。即：0^0=0， 1^0=1， 0^1=1， 1^1=0 例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5: 00000101</span><br><span class="line">3: 00000100</span><br><span class="line">5^3 = 00000001 -&gt; 1</span><br></pre></td></tr></table></figure><p>我们这里只需要在一个for循环里面进行对每个数累计求异或运算 <strong>^=</strong>即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码很简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int xorOperation(int n, int start) &#123;</span><br><span class="line">        int result = 0;</span><br><span class="line">        for(int i=0; i&lt;n; i++)&#123;</span><br><span class="line">            result ^= start + 2*i;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题是很简单的一道题.做这个题解的目的呢主要是记录一下</p><p>希望自己能慢慢在leetcode上刷题来提升自己去解决更复杂的问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/study/LeetCode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>HBase集群配置搭建</title>
    <link href="http://yoursite.com/2020/05/08/HBase%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/05/08/HBase集群配置搭建/</id>
    <published>2020-05-08T13:53:16.000Z</published>
    <updated>2020-05-08T13:55:44.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-集群分配"><a href="#1-集群分配" class="headerlink" title="1.集群分配"></a>1.集群分配</h1><p>这里搭建一个 3 节点的 HBase 集群，其中三台主机上均为 <code>Regin Server</code>。同时为了保证高可用，除了在 master 上部署主 <code>Master</code> 服务外，还在 slave1 上部署备用的 <code>Master</code> 服务。<code>Master</code> 服务由 Zookeeper 集群进行协调管理，如果主 <code>Master</code> 不可用，则备用 <code>Master</code> 会成为新的主 <code>Master</code>。</p><h1 id="2-前置条件"><a href="#2-前置条件" class="headerlink" title="2.前置条件"></a>2.前置条件</h1><p>HBase 的运行需要依赖 Hadoop 和 JDK(HBase 2.0+ 对应 JDK 1.8+) 。同时为了保证高可用，这里我们不采用 HBase 内置的 Zookeeper 服务，而采用外置的 Zookeeper 集群。相关搭建步骤可以参阅</p><h1 id="3-集群搭建"><a href="#3-集群搭建" class="headerlink" title="3.集群搭建"></a>3.集群搭建</h1><h2 id="3-1-下载并解压"><a href="#3-1-下载并解压" class="headerlink" title="3.1 下载并解压"></a>3.1 下载并解压</h2><p>讲下载好的HBase可以通过WinScp上传到服务器上.然后进行解压:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf hbase-1.2.0-cdh5.15.2.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3-2-配置环境变量"><a href="#3-2-配置环境变量" class="headerlink" title="3.2 配置环境变量"></a>3.2 配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=usr/app/hbase-1.2.0-cdh5.15.2</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>使得配置生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=usr/app/hbase-1.2.0-cdh5.15.2</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><h2 id="3-3-集群配置"><a href="#3-3-集群配置" class="headerlink" title="3.3 集群配置"></a>3.3 集群配置</h2><p>进入<code>${HBASE_HOME}/conf</code>目录下,修改配置:</p><ol><li><p>hbase-env.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置JDK安装位置</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_231</span><br><span class="line"># 不使用内置的zookeeper服务</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure></li><li><p>hbase-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!-- 指定 hbase 以分布式集群的方式运行 --&gt;</span><br><span class="line">        &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!-- 指定 hbase 在 HDFS 上的存储位置 --&gt;</span><br><span class="line">        &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://hadoop001:8020/hbase&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!-- 指定 zookeeper 的地址--&gt;</span><br><span class="line">        &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hadoop001:2181,hadoop002:2181,hadoop003:2181&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>regionservers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure></li><li><p>backup-masters</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave1</span><br></pre></td></tr></table></figure></li></ol><p><strong>注:<code>backup-masters</code> 这个文件是不存在的，需要新建，主要用来指明备用的 master 节点，可以是多个，这里我们以 1 个为例。</strong></p><h2 id="3-4-安装包分发"><a href="#3-4-安装包分发" class="headerlink" title="3.4 安装包分发"></a>3.4 安装包分发</h2><p>将 HBase 的安装包分发到其他服务器，分发后建议在这两台服务器上也配置一下 HBase 的环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /usr/local/hbase-2.0.0/  slave1:usr/local/</span><br><span class="line">scp -r /usr/local/hbase-2.0.0/  slave2:usr/local/</span><br></pre></td></tr></table></figure><h1 id="4-启动集群"><a href="#4-启动集群" class="headerlink" title="4 启动集群"></a>4 启动集群</h1><h2 id="4-1-启动ZooKeeper集群"><a href="#4-1-启动ZooKeeper集群" class="headerlink" title="4.1 启动ZooKeeper集群"></a>4.1 启动ZooKeeper集群</h2><p>分别到三台服务器上启动 ZooKeeper 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure><h2 id="4-2-启动Hadoop集群"><a href="#4-2-启动Hadoop集群" class="headerlink" title="4.2 启动Hadoop集群"></a>4.2 启动Hadoop集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动dfs服务</span><br><span class="line">start-dfs.sh</span><br><span class="line"># 启动yarn服务</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure><h2 id="4-3-启动HBase集群"><a href="#4-3-启动HBase集群" class="headerlink" title="4.3 启动HBase集群"></a>4.3 启动HBase集群</h2><p>进入 master 的 <code>${HBASE_HOME}/bin</code>，使用以下命令启动 HBase 集群。执行此命令后，会在 master 上启动 Master 服务，在 slave1 上启动备用 <code>Master</code> 服务，在 <code>regionservers</code> 文件中配置的所有节点启动 <code>region server</code> 服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure><h2 id="4-4-查看服务"><a href="#4-4-查看服务" class="headerlink" title="4.4 查看服务"></a>4.4 查看服务</h2><p>访问 HBase 的 Web-UI 界面，这里我安装的 HBase 版本为 2.0.0，访问端口为 16010，如果你安装的是 2.0 以下的版本，则访问端口号为 60010。可以看到 <code>Master</code> 在 master 上，三个 Regin Servers 分别在 master，slave1，和 slave2 上，并且还有一个 <code>Backup Matser</code> 服务在 slave1 上。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>至此,已经在三台虚拟机上将<code>Hadoop2.8.5</code>,<code>Zookeeper3.4.14</code>以及<code>Hbase2.0.0</code>搭建全部结束</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="HBase" scheme="http://yoursite.com/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper集群配置搭建</title>
    <link href="http://yoursite.com/2020/05/08/Zookeeper%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/05/08/Zookeeper集群配置搭建/</id>
    <published>2020-05-08T13:53:05.000Z</published>
    <updated>2020-05-08T13:55:34.754Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Zookeeper集群环境搭建"><a href="#1-Zookeeper集群环境搭建" class="headerlink" title="1.Zookeeper集群环境搭建"></a>1.Zookeeper集群环境搭建</h1><h2 id="1-1下载"><a href="#1-1下载" class="headerlink" title="1.1下载"></a>1.1下载</h2><p>下载对应版本 Zookeeper，这里我下载的版本 3.4.14。官方下载地址：<a href="https://archive.apache.org/dist/zookeeper/" target="_blank" rel="noopener">https://archive.apache.org/dist/zookeeper/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><h2 id="1-2解压"><a href="#1-2解压" class="headerlink" title="1.2解压"></a>1.2解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><h2 id="1-3配置环境解压"><a href="#1-3配置环境解压" class="headerlink" title="1.3配置环境解压"></a>1.3配置环境解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/app/zookeeper-3.4.14</span><br><span class="line">export PATH=$ZOOKEEPER_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>使得配置生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="1-4修改配置"><a href="#1-4修改配置" class="headerlink" title="1.4修改配置"></a>1.4修改配置</h2><p>进入安装目录的 conf/ 目录下，拷贝配置样本并进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp zoo_sample.cfg  zoo.cfg</span><br></pre></td></tr></table></figure><p>指定数据存储目录和日志文件目录（目录不用预先创建，程序会自动创建），修改后完整配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/usr/local/zookeeper-cluster/data/</span><br><span class="line">dataLogDir=/usr/local/zookeeper-cluster/log/</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line"># server.1 这个1是服务器的标识，可以是任意有效数字，标识这是第几个服务器节点，这个标识要写到dataDir目录下面myid文件里</span><br><span class="line"># 指名集群间通讯端口和选举端口</span><br><span class="line">server.1=master:2287:3387</span><br><span class="line">server.2=slave1:2287:3387</span><br><span class="line">server.3=slave2:2287:3387</span><br></pre></td></tr></table></figure><p>配置说明:</p><ul><li>tickTime：用于计算的基础时间单元。比如 session 超时：N*tickTime；</li><li>initLimit：用于集群，允许从节点连接并同步到 master 节点的初始化连接时间，以 tickTime 的倍数来表示；</li><li>syncLimit：用于集群， master 主节点与从节点之间发送消息，请求和应答时间长度（心跳机制）；</li><li>dataDir：数据存储位置；</li><li>dataLogDir：日志目录；</li><li>clientPort：用于客户端连接的端口，默认 2181</li></ul><h2 id="1-5-标识节点"><a href="#1-5-标识节点" class="headerlink" title="1.5 标识节点"></a>1.5 标识节点</h2><p>分别在三台主机的 dataDir 目录下新建 myid 文件,并写入对应的节点标识。Zookeeper 集群通过 myid 文件识别集群节点，并通过上文配置的节点通信端口和选举端口来进行节点通信，选举出 Leader 节点。<br>创建存储目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 三台主机均执行该命令</span><br><span class="line">mkdir -vp  /usr/local/zookeeper-cluster/data/</span><br></pre></td></tr></table></figure><p>创建并写入节点标识到 myid 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># master主机</span><br><span class="line">echo &quot;1&quot; &gt; /usr/local/zookeeper-cluster/data/myid</span><br><span class="line"># slave1主机</span><br><span class="line">echo &quot;2&quot; &gt; /usr/local/zookeeper-cluster/data/myid</span><br><span class="line"># slave2主机</span><br><span class="line">echo &quot;3&quot; &gt; /usr/local/zookeeper-cluster/data/myid</span><br></pre></td></tr></table></figure><h2 id="1-5-启动"><a href="#1-5-启动" class="headerlink" title="1.5 启动"></a>1.5 启动</h2><p>分别在三台主机运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure><h2 id="1-6-验证"><a href="#1-6-验证" class="headerlink" title="1.6 验证"></a>1.6 验证</h2><p>启动后使用 zkServer.sh status 查看集群各个节点状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Zookeeper" scheme="http://yoursite.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>hadoop集群搭建</title>
    <link href="http://yoursite.com/2020/05/08/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/05/08/hadoop集群搭建/</id>
    <published>2020-05-08T13:17:50.000Z</published>
    <updated>2020-05-08T13:43:57.652Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-基本环境"><a href="#1-基本环境" class="headerlink" title="1. 基本环境"></a>1. 基本环境</h1><h2 id="1-1-三台虚拟机"><a href="#1-1-三台虚拟机" class="headerlink" title="1.1 三台虚拟机"></a>1.1 三台虚拟机</h2><p>169.254.110.100 master</p><p>169.254.110.101 slave1</p><p>169.254.110.102 slave2</p><h2 id="1-2-软件包"><a href="#1-2-软件包" class="headerlink" title="1.2 软件包"></a>1.2 软件包</h2><p>jdk-8u231-linux-i586.tar.gz</p><p>hadoop-2.8.5.tar.gz</p><h1 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h1><h2 id="2-1-新建hadoop用户"><a href="#2-1-新建hadoop用户" class="headerlink" title="2.1 新建hadoop用户"></a>2.1 新建hadoop用户</h2><p><code>useradd hadoop</code></p><p>通过passwd命令修改hadoop用户密码，启用hadoop用户。<br><code>passwd hadoop</code></p><h2 id="2-2-配置ssh免密码登录"><a href="#2-2-配置ssh免密码登录" class="headerlink" title="2.2 配置ssh免密码登录"></a>2.2 配置ssh免密码登录</h2><p>2.2.1 集群环境</p><table><thead><tr><th>节点名称</th><th>节点ip</th></tr></thead><tbody><tr><td>master</td><td>169.254.110.100</td></tr><tr><td>slave1</td><td>169.254.110.101</td></tr><tr><td>slave2</td><td>169.254.110.102</td></tr></tbody></table><p>2.2.2 免登录原理<br>每台主机<code>authorized_keys</code>文件里面包含的主机（ssh密钥），该主机都能无密码登录，所以只要每台主机的<code>authorized_keys</code>文件里面都放入其他主机（需要无密码登录的主机）的ssh密钥就行了。</p><p>2.2.3 实现<br>每个节点生成ssh密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ssh-keygen -t rsa(一直点确定)</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory &apos;/root/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">.....................</span><br><span class="line"></span><br><span class="line">[root@master .ssh]# ls</span><br><span class="line">id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure><p>在主节点(master)将公钥(id_rsa.pub)拷到一个特定文件<code>authorized_keys</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master .ssh]# cp id_rsa.pub authorized_keys</span><br><span class="line">[root@master .ssh]# ls</span><br><span class="line">authorized_keys  id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后将该文件拷到下一个节点中去,并将该节点的ssh密钥<em>追加</em>到该文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#在master上使用scp命令实现远程文件拷贝</span><br><span class="line">[root@master .ssh]# scp authorized_keys  root@hadoop02:/root/.ssh/</span><br><span class="line">The authenticity of host &apos;hadoop02 (192.168.44.11)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:MyB1zs0E3J/fm8pC0AN8ycsgEIBNHtUqd9xS0WAyv3s.</span><br><span class="line">ECDSA key fingerprint is MD5:88:48:3a:ba:3e:14:a7:d7:86:f6:51:74:00:10:f9:00.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;hadoop02,192.168.44.11&apos; (ECDSA) to the list of known hosts.</span><br><span class="line">root@hadoop02&apos;s password: </span><br><span class="line">authorized_keys                                                                100%  395   306.2KB/s   00:00    </span><br><span class="line"></span><br><span class="line">#登录slave1主机</span><br><span class="line">[root@slave1 ~]# cd .ssh/</span><br><span class="line">[root@slave1 .ssh]# ls</span><br><span class="line">authorized_keys  id_rsa  id_rsa.pub</span><br><span class="line">[root@slave1 .ssh]# cat id_rsa.pub &gt;&gt; authorized_keys #使用cat追加方式</span><br></pre></td></tr></table></figure><p>重复上步操作,将slave1的<code>authorized_keys</code>文件传到slave2中并将slave2中的密钥追加到该文件中.最后将slave2的<code>authorized_keys</code>文件传到master与slave1中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#登录slave2主机，将ssh密钥加入authorized_keys文件中</span><br><span class="line">[root@slave2 .ssh]# cat id_rsa.pub &gt;&gt; authorized_keys </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#将最后生成的authorized_keys文件分别拷贝到master,slave1</span><br><span class="line">[root@slave2 .ssh]# scp authorized_keys root@master:/root/.ssh/</span><br><span class="line">[root@slave2 .ssh]# scp authorized_keys root@slave1:/root/.ssh/</span><br></pre></td></tr></table></figure><p>最后免密登录</p><h2 id="2-3-修改hosts文件"><a href="#2-3-修改hosts文件" class="headerlink" title="2.3 修改hosts文件"></a>2.3 修改hosts文件</h2><p>修改master主机hosts文件<br><code>vi /etc/hosts</code> 并添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">169.254.110.100 master</span><br><span class="line">169.254.110.101 slave1</span><br><span class="line">169.254.110.102 slave2</span><br></pre></td></tr></table></figure><p>并且同步到其他主机上去</p><h2 id="2-4-JDK安装"><a href="#2-4-JDK安装" class="headerlink" title="2.4 JDK安装"></a>2.4 JDK安装</h2><p>这里不多阐述 用<code>WinSCP</code>传到虚拟机中然后解压并且配置环境变量</p><h2 id="2-5-Hadoop环境配置"><a href="#2-5-Hadoop环境配置" class="headerlink" title="2.5 Hadoop环境配置"></a>2.5 Hadoop环境配置</h2><h3 id="2-5-1-上传并且解压hadoop2-8-5"><a href="#2-5-1-上传并且解压hadoop2-8-5" class="headerlink" title="2.5.1 上传并且解压hadoop2.8.5"></a>2.5.1 上传并且解压hadoop2.8.5</h3><ul><li><p>hadoop-env.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 指定JDK的安装位置</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_201/</span><br></pre></td></tr></table></figure></li><li><p>core-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!--指定 namenode 的 hdfs 协议文件系统的通信地址--&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://master:8020&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!--指定 hadoop 集群存储临时文件的目录--&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/hadoop/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>hdfs-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">      &lt;!--namenode 节点数据（即元数据）的存放位置，可以指定多个目录实现容错，多个目录用逗号分隔--&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/home/hadoop/namenode/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">      &lt;!--datanode 节点数据（即数据块）的存放位置--&gt;</span><br><span class="line">    &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/home/hadoop/datanode/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>yarn-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!--配置 NodeManager 上运行的附属服务。需要配置成 mapreduce_shuffle 后才可以在 Yarn 上运行 MapReduce 程序。--&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!--resourcemanager 的主机名--&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hadoop001&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>slaves</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-2-分发程序"><a href="#2-5-2-分发程序" class="headerlink" title="2.5.2 分发程序"></a>2.5.2 分发程序</h3><p>将 Hadoop 安装包分发到其他两台服务器，分发后建议在这两台服务器上也配置一下 Hadoop 的环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将安装包分发到hadoop002</span><br><span class="line">scp -r /usr/home/hadoop-2.8.5-cdh5.15.2/  root@slave1:/usr/home/</span><br><span class="line"># 将安装包分发到hadoop003</span><br><span class="line">scp -r /usr/home/hadoop-2.8.5-cdh5.15.2/  root@slave2:/usr/home/</span><br></pre></td></tr></table></figure><h2 id="2-6-初始化"><a href="#2-6-初始化" class="headerlink" title="2.6 初始化"></a>2.6 初始化</h2><p>在 <code>master</code> 上执行 namenode 初始化命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><h2 id="2-7-启动集群"><a href="#2-7-启动集群" class="headerlink" title="2.7 启动集群"></a>2.7 启动集群</h2><p>在<code>master</code>主机中进入${HADOOP_HOME}/sbin 目录下，启动 Hadoop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动dfs服务</span><br><span class="line">start-dfs.sh</span><br><span class="line"># 启动yarn服务</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure><h2 id="3-7-查看集群"><a href="#3-7-查看集群" class="headerlink" title="3.7 查看集群"></a>3.7 查看集群</h2><p>在每台服务器上使用 jps 命令查看服务进程，或直接进入 Web-UI 界面进行查看，端口为 50070。</p><h1 id="4-提交服务到集群"><a href="#4-提交服务到集群" class="headerlink" title="4 提交服务到集群"></a>4 提交服务到集群</h1><p>提交作业到集群的方式和单机环境完全一致，这里以提交 Hadoop 内置的计算 Pi 的示例程序为例，在任何一个节点上执行都可以，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar /usr/app/hadoop-2.6.0-cdh5.15.2/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.15.2.jar  pi  3  3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Springboot整合Thymeleaf</title>
    <link href="http://yoursite.com/2019/09/03/Springboot%E6%95%B4%E5%90%88Thymeleaf/"/>
    <id>http://yoursite.com/2019/09/03/Springboot整合Thymeleaf/</id>
    <published>2019-09-03T07:58:31.000Z</published>
    <updated>2019-09-03T08:03:28.857Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="thymeleaf的介绍"><a href="#thymeleaf的介绍" class="headerlink" title="thymeleaf的介绍"></a>thymeleaf的介绍</h2><p>Thymeleaf 介绍<br>Thymeleaf 是一款用于渲染 XML/XHTML/HTML5 内容的模板引擎。类似 JSP，Velocity，FreeMaker 等，它也可以轻易的与 Spring MVC 等 Web 框架进行集成作为 Web 应用的模板引擎。与其它模板引擎相比，Thymeleaf 最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个 Web 应用。</p><p>好了，你们说了我们已经习惯使用了什么 Velocity,FreMaker，beetle之类的模版，那么到底好在哪里呢？</p><p>比一比吧</p><p>Thymeleaf 是与众不同的，因为它使用了自然的模板技术。这意味着 Thymeleaf 的模板语法并不会破坏文档的结构，模板依旧是有效的XML文档。模板还可以用作工作原型，Thymeleaf 会在运行期替换掉静态值。Velocity 与 FreeMarke r则是连续的文本处理器。 下面的代码示例分别使用 Velocity、FreeMarker 与 Thymeleaf 打印出一条消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Velocity: &lt;p&gt;$message&lt;/p&gt;</span><br><span class="line">FreeMarker: &lt;p&gt;$&#123;message&#125;&lt;/p&gt;</span><br><span class="line">Thymeleaf: &lt;p th:text=&quot;$&#123;message&#125;&quot;&gt;Hello World!&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>注意，由于 Thymeleaf 使用了 <code>XML DOM</code> 解析器，因此它并不适合于处理大规模的 XML 文件。</p><h2 id="添加Jar包"><a href="#添加Jar包" class="headerlink" title="添加Jar包"></a>添加Jar包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- thymelaef模板 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Thymeleaf配置</span><br><span class="line"></span><br><span class="line">#开发时关闭缓存,不然没法看到实时页面</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.check-template=true</span><br><span class="line"># 模板模式设置，默认为HTML5</span><br><span class="line">spring.thymeleaf.mode=HTML5</span><br><span class="line">spring.thymeleaf.check-template-location=true</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br></pre></td></tr></table></figure><h2 id="模板中引入thymeleaf"><a href="#模板中引入thymeleaf" class="headerlink" title="模板中引入thymeleaf"></a>模板中引入thymeleaf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="thymeleaf部分语法"><a href="#thymeleaf部分语法" class="headerlink" title="thymeleaf部分语法"></a>thymeleaf部分语法</h2><p>URL<br>URL 在 Web 应用模板中占据着十分重要的地位，需要特别注意的是 Thymeleaf 对于 URL 的处理是通过语法 @{…} 来处理的。Thymeleaf 支持绝对路径 URL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a th:href=&quot;@&#123;http://www.thymeleaf.org&#125;&quot;&gt;Thymeleaf&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>条件求值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a th:href=&quot;@&#123;/login&#125;&quot; th:unless=$&#123;session.user != null&#125;&gt;Login&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr th:each=&quot;prod : $&#123;prods&#125;&quot;&gt;</span><br><span class="line">      &lt;td th:text=&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;/td&gt;</span><br><span class="line">      &lt;td th:text=&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;/td&gt;</span><br><span class="line">      &lt;td th:text=&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><h2 id="thymeleaf中文文档"><a href="#thymeleaf中文文档" class="headerlink" title="thymeleaf中文文档"></a>thymeleaf中文文档</h2><p><a href="https://blog.csdn.net/zhangcc233/article/details/80831056" target="_blank" rel="noopener">Thymeleaf中文文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/study/java/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="Thymeleaf" scheme="http://yoursite.com/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Springboot整合Jpa</title>
    <link href="http://yoursite.com/2019/09/01/Springboot%E6%95%B4%E5%90%88Jpa/"/>
    <id>http://yoursite.com/2019/09/01/Springboot整合Jpa/</id>
    <published>2019-09-01T07:58:42.000Z</published>
    <updated>2019-09-01T08:14:59.564Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="添加jar包"><a href="#添加jar包" class="headerlink" title="添加jar包"></a>添加jar包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span><br><span class="line">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">spring.jpa.show-sql= true</span><br></pre></td></tr></table></figure><p><strong>spring.jpa.properties.hibernate.hbm2ddl.auto</strong>这个参数的作用在于:自动创建,更新,验证数据库表的结构<br>有以下是四个值:</p><p>1 create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。</p><p>2 create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。</p><p>3 update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。</p><p>4 validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</p><p><strong>dialect</strong>主要是指定生成表名的存储引擎为InnoDBD</p><p><strong>show-sql</strong>是否打印出自动生成的SQL,方便调试的时候查看</p><h2 id="添加实体类"><a href="#添加实体类" class="headerlink" title="添加实体类"></a>添加实体类</h2><p>与数据表进行映射,并且配置好映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    @Id //设置主键</span><br><span class="line">    @GeneratedValue //id自增</span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false,unique = true) //用户名不为空且唯一</span><br><span class="line">    private String userName;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false)</span><br><span class="line">    private String passWord;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false)</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false)</span><br><span class="line">    private String nickName;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false)</span><br><span class="line">    private String regTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置DAO层"><a href="#设置DAO层" class="headerlink" title="设置DAO层"></a>设置DAO层</h2><p>dao 只要继承 JpaRepository 类就可以，几乎可以不用写方法，还有一个特别有尿性的功能非常赞，就是可以根据方法名来自动的生成 SQL，比如<strong>findByUserName</strong> 会自动生成一个以 <strong>userName</strong> 为参数的查询方法，比如 findAlll 自动会查询表里面的所有数据，比如自动分页等等。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface UserRepository extends JpaRepository&lt;User,Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    User findByUserName(String userName);</span><br><span class="line"></span><br><span class="line">    User findByUserNameAndPassWord(String userName,String password);</span><br><span class="line"></span><br><span class="line">    User findByUserNameOrEmail(String userName,String Email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加Service层"><a href="#添加Service层" class="headerlink" title="添加Service层"></a>添加Service层</h2><p>UserService.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * 功能描述: 添加用户</span><br><span class="line">     *</span><br><span class="line">     * @param: user</span><br><span class="line">     * @return: User</span><br><span class="line">     * @auther: zy</span><br><span class="line">     * @date: 2019/9/1 15:05</span><br><span class="line">     */</span><br><span class="line">    User saveUser(User user);</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * 功能描述: 删除用户</span><br><span class="line">     *</span><br><span class="line">     * @param: id</span><br><span class="line">     * @return: void</span><br><span class="line">     * @auther: zy</span><br><span class="line">     * @date: 2019/9/1 15:06</span><br><span class="line">     */</span><br><span class="line">    void removeUser(Long id);</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * 功能描述: 更新用户信息</span><br><span class="line">     *</span><br><span class="line">     * @param: user</span><br><span class="line">     * @return: User</span><br><span class="line">     * @auther: zy</span><br><span class="line">     * @date: 2019/9/1 15:06</span><br><span class="line">     */</span><br><span class="line">    User updateUser(User user);</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * 功能描述: 通过id得到用户</span><br><span class="line">     *</span><br><span class="line">     * @param: id</span><br><span class="line">     * @return: User</span><br><span class="line">     * @auther: zy</span><br><span class="line">     * @date: 2019/9/1 15:06</span><br><span class="line">     */</span><br><span class="line">    User getUserByNameAndPassword(String userName,String passWord);</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * 功能描述: 得到所有用户信息</span><br><span class="line">     *</span><br><span class="line">     * @param: null</span><br><span class="line">     * @return: List&lt;User&gt;</span><br><span class="line">     * @auther: zy</span><br><span class="line">     * @date: 2019/9/1 15:07</span><br><span class="line">     */</span><br><span class="line">    List&lt;User&gt; getAllUsers();</span><br></pre></td></tr></table></figure><p>UserServiceImpl.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User saveUser(User user) &#123;</span><br><span class="line">        return userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void removeUser(Long id) &#123;</span><br><span class="line">        userRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User updateUser(User user) &#123;</span><br><span class="line">        return userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User getUserByNameAndPassword(String userName, String passWord) &#123;</span><br><span class="line">        return userRepository.findByUserNameAndPassWord(userName,passWord);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;User&gt; getAllUsers() &#123;</span><br><span class="line">        return userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层-Controller"><a href="#控制层-Controller" class="headerlink" title="控制层(Controller)"></a>控制层(Controller)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/users&quot;)</span><br><span class="line">    public User getUser()&#123;</span><br><span class="line">        // 获取当前时间</span><br><span class="line">        Date date = new Date();</span><br><span class="line"></span><br><span class="line">        DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">        String time = dateFormat.format(date);</span><br><span class="line"></span><br><span class="line">        User user = new User(1L,&quot;zzy001&quot;,&quot;f695112338&quot;,&quot;zyf695112338@qq.com&quot;,&quot;金毛玲&quot;,time);</span><br><span class="line"></span><br><span class="line">        userService.saveUser(user);</span><br><span class="line"></span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo结果"><a href="#Demo结果" class="headerlink" title="Demo结果"></a>Demo结果</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\zyvictor\Desktop\截图\Springboot-hello-demo.jpg" alt="demo" title>                </div>                <div class="image-caption">demo</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/study/java/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--jdbcType报错</title>
    <link href="http://yoursite.com/2019/08/12/BuilderException-%20Error%20resolving%20JdbcType/"/>
    <id>http://yoursite.com/2019/08/12/BuilderException- Error resolving JdbcType/</id>
    <published>2019-08-12T08:14:25.000Z</published>
    <updated>2019-08-12T08:14:53.294Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>启动tomcat的时候报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">` Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving JdbcType. Cause: java.lang.IllegalArgumentException: No enum constant org.apache.ibatis.type.JdbcType.DATATIME</span><br><span class="line">at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)</span><br><span class="line">at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:92)</span><br><span class="line">at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:521)</span><br><span class="line">... 84 more</span><br><span class="line">Caused by: org.apache.ibatis.builder.BuilderException: Error resolving JdbcType. Cause: java.lang.IllegalArgumentException: No enum constant org.apache.ibatis.type.JdbcType.DATATIME</span><br><span class="line">at org.apache.ibatis.builder.BaseBuilder.resolveJdbcType(BaseBuilder.java:73)</span><br><span class="line">at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildResultMappingFromContext(XMLMapperBuilder.java:382)</span><br><span class="line">at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:280)</span><br><span class="line">at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:252)</span><br><span class="line">at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElements(XMLMapperBuilder.java:244)</span><br><span class="line">at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:116)</span><br><span class="line">... 86 more</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: No enum constant org.apache.ibatis.type.JdbcType.DATATIME</span><br><span class="line">at java.lang.Enum.valueOf(Enum.java:238)</span><br><span class="line">at org.apache.ibatis.type.JdbcType.valueOf(JdbcType.java:25)</span><br><span class="line">at org.apache.ibatis.builder.BaseBuilder.resolveJdbcType(BaseBuilder.java:71)</span><br><span class="line">... 91 more</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>看报错的原因,是因为我在resultmap中jdbcType写了datatime,而在mybatis中是这个数据类型的</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>修改resultmap中的jdbcType即可</p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>我去网上查看了源码,发现mybatis的jdbcType是一个枚举类,有以下类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public enum JdbcType &#123;</span><br><span class="line">    ARRAY(2003),</span><br><span class="line">    BIT(-7),</span><br><span class="line">    TINYINT(-6),</span><br><span class="line">    SMALLINT(5),</span><br><span class="line">    INTEGER(4),</span><br><span class="line">    BIGINT(-5),</span><br><span class="line">    FLOAT(6),</span><br><span class="line">    REAL(7),</span><br><span class="line">    DOUBLE(8),</span><br><span class="line">    NUMERIC(2),</span><br><span class="line">    DECIMAL(3),</span><br><span class="line">    CHAR(1),</span><br><span class="line">    VARCHAR(12),</span><br><span class="line">    LONGVARCHAR(-1),</span><br><span class="line">    DATE(91),</span><br><span class="line">    TIME(92),</span><br><span class="line">    TIMESTAMP(93),</span><br><span class="line">    BINARY(-2),</span><br><span class="line">    VARBINARY(-3),</span><br><span class="line">    LONGVARBINARY(-4),</span><br><span class="line">    NULL(0),</span><br><span class="line">    OTHER(1111),</span><br><span class="line">    BLOB(2004),</span><br><span class="line">    CLOB(2005),</span><br><span class="line">    BOOLEAN(16),</span><br><span class="line">    CURSOR(-10),</span><br><span class="line">    UNDEFINED(-2147482648),</span><br><span class="line">    NVARCHAR(-9),</span><br><span class="line">    NCHAR(-15),</span><br><span class="line">    NCLOB(2011),</span><br><span class="line">    STRUCT(2002),</span><br><span class="line">    JAVA_OBJECT(2000),</span><br><span class="line">    DISTINCT(2001),</span><br><span class="line">    REF(2006),</span><br><span class="line">    DATALINK(70),</span><br><span class="line">    ROWID(-8),</span><br><span class="line">    LONGNVARCHAR(-16),</span><br><span class="line">    SQLXML(2009),</span><br><span class="line">    DATETIMEOFFSET(-155);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望以后自己能越过这个坎,多长记性.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/study/java/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>idea--target不同步问题</title>
    <link href="http://yoursite.com/2019/08/09/%E5%85%B3%E4%BA%8Eidea%E4%B8%ADtarget%E4%B8%8D%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/08/09/关于idea中target不同步的问题/</id>
    <published>2019-08-09T11:15:25.000Z</published>
    <updated>2019-08-12T08:15:57.645Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h3><p>ssm小项目中,加入了新的css文件和js文件,然后重启项目,发现并没有效果.然鹅在页面中也及时的引用了相关的css和js文件.</p><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>我使用的idea编译器,发现target文件中并没有相关的css和js文件,导致我在页面中引入了等同于没有引用,所以导致页面没有相关的效果.</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>先清理项目中的target目录,然后再rebuild项目即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//清理target目录</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>然后rebuild项目(<code>快捷键Ctrl+Shift+F9</code>)</p><p>解决问题ok拉!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记:Mybatis-PageHelper</title>
    <link href="http://yoursite.com/2019/07/17/Mybatis%E4%B9%8BPagehelper/"/>
    <id>http://yoursite.com/2019/07/17/Mybatis之Pagehelper/</id>
    <published>2019-07-17T12:04:14.000Z</published>
    <updated>2019-07-17T15:01:53.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="Mybatis为我们提供了非常优秀的分页插件PageHelper该插件支持任何复杂的单表或者是多表-PageHelper实现了通用的分页查询-支持的数据有mysql-Oracle-DB2-PostgreSQL等"><a href="#Mybatis为我们提供了非常优秀的分页插件PageHelper该插件支持任何复杂的单表或者是多表-PageHelper实现了通用的分页查询-支持的数据有mysql-Oracle-DB2-PostgreSQL等" class="headerlink" title="Mybatis为我们提供了非常优秀的分页插件PageHelper该插件支持任何复杂的单表或者是多表. PageHelper实现了通用的分页查询,支持的数据有mysql,Oracle,DB2,PostgreSQL等"></a>Mybatis为我们提供了非常优秀的分页插件PageHelper该插件支持任何复杂的单表或者是多表. PageHelper实现了通用的分页查询,支持的数据有mysql,Oracle,DB2,PostgreSQL等</h3><h3 id="该插件托管于github-https-github-com-pagehelper-Mybatis-PageHelper"><a href="#该插件托管于github-https-github-com-pagehelper-Mybatis-PageHelper" class="headerlink" title="该插件托管于github: https://github.com/pagehelper/Mybatis-PageHelper"></a>该插件托管于github: <a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></h3><h1 id="如何使用PageHelper"><a href="#如何使用PageHelper" class="headerlink" title="如何使用PageHelper"></a>如何使用PageHelper</h1><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><h4 id="使用maven导入"><a href="#使用maven导入" class="headerlink" title="- 使用maven导入"></a>- 使用maven导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h4><pre><code>1). 你可以从下面的地址中下载最新版本的 jar 包https://oss.sonatype.org/content/repositories/releases/com/github/pagehelper/pagehelper/http://repo1.maven.org/maven2/com/github/pagehelper/pagehelper/2). 由于使用了sql 解析工具，你还需要下载 jsqlparser.jar：http://repo1.maven.org/maven2/com/github/jsqlparser/jsqlparser/0.9.5/</code></pre><h3 id="配置拦截器插件"><a href="#配置拦截器插件" class="headerlink" title="配置拦截器插件"></a>配置拦截器插件</h3><p>特别注意，新版拦截器是 <strong>com.github.pagehelper.PageInterceptor</strong></p><p><strong>com.github.pagehelper.PageHelper</strong> 现在是一个特殊的 dialect 实现类，是分页插件的默认实现类，提供了和以前相同的用法。</p><h4 id="在Mybatis配置xml中配置拦截器插件"><a href="#在Mybatis配置xml中配置拦截器插件" class="headerlink" title="在Mybatis配置xml中配置拦截器插件"></a>在Mybatis配置xml中配置拦截器插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">        &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;</span><br><span class="line">            &lt;!--分页参数合理化  --&gt;</span><br><span class="line">            &lt;property name=&quot;reasonable&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br></pre></td></tr></table></figure><h4 id="在Spring配置文件中配置拦截器插件"><a href="#在Spring配置文件中配置拦截器插件" class="headerlink" title="在Spring配置文件中配置拦截器插件"></a>在Spring配置文件中配置拦截器插件</h4><p>使用 spring 的属性配置方式，可以使用 <strong>plugins</strong> 属性像下面这样配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">  &lt;!-- 注意其他配置 --&gt;</span><br><span class="line">  &lt;property name=&quot;plugins&quot;&gt;</span><br><span class="line">    &lt;array&gt;</span><br><span class="line">      &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;properties&quot;&gt;</span><br><span class="line">          &lt;!--使用下面的方式配置参数，一行配置一个 --&gt;</span><br><span class="line">          &lt;value&gt;</span><br><span class="line">            params=value1</span><br><span class="line">          &lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">    &lt;/array&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>确确实实去配置文件会让人显得很郁闷也很头疼.</p><p>所以我一般参照官方文档去配置,里面不仅有分页插件的参数介绍还有常用的配置参数,不同的场景需要配置不同的参数.</p><p><a href="https://pagehelper.github.io/docs/howtouse/" target="_blank" rel="noopener">参考PageHelper官方文档</a></p><h3 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h3><p>在我做的demo中,我是获取所有部门然后在使用分页插件进行物理分页.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface DepartmentMapper &#123;</span><br><span class="line"> //获取所有部门</span><br><span class="line">    List&lt;Department&gt; getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface DepartmentService &#123;</span><br><span class="line">//查询所有</span><br><span class="line">    List&lt;Department&gt; getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现相应的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class DepartmentServiceImpl implements DepartmentService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Department&gt; getAll() &#123;</span><br><span class="line">        return departmentMapper.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><p>在控制器中,是跳转到部门的页面的时候将数据查询到然后使用PageHelper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @project : HRM</span><br><span class="line"> * @description : 控制器-首页管理</span><br><span class="line"> * @author : zy</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;main&quot;)</span><br><span class="line">public class MainController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    @Autowired</span><br><span class="line">    DepartmentService departmentService;</span><br><span class="line">    @Autowired</span><br><span class="line">    EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line">     * @decription 查询所有部门信息并跳转到部门信息页面(分页查询)</span><br><span class="line">     * @param model</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;toDepartmentList.html&quot;)</span><br><span class="line">    public String toDepartmentList(@RequestParam(value = &quot;pn&quot;, defaultValue = &quot;1&quot;) Integer pn, Model model)&#123;</span><br><span class="line">        //pn为当前页码,每页的大小为5</span><br><span class="line">        PageHelper.startPage(pn,5);</span><br><span class="line">        List&lt;Department&gt; departmentList = departmentService.getAll();</span><br><span class="line">        //导航栏最多为5页</span><br><span class="line">        PageInfo pageInfo = new PageInfo(departmentList,5);</span><br><span class="line">        model.addAttribute(&quot;pageInfo&quot;,pageInfo);</span><br><span class="line">        return &quot;Dep/DepartmentList&quot;;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用PageHelper的静态方法-PageHelper-startPage-currentPage-PageSize"><a href="#使用PageHelper的静态方法-PageHelper-startPage-currentPage-PageSize" class="headerlink" title="使用PageHelper的静态方法:PageHelper.startPage(currentPage,PageSize)"></a>使用PageHelper的静态方法:PageHelper.startPage(currentPage,PageSize)</h4><p>(<strong>currentPage</strong>是指的当前页数<br><strong>PageSize</strong>是指的是每页的大小)</p><h4 id="使用PageInfo对象"><a href="#使用PageInfo对象" class="headerlink" title="使用PageInfo对象"></a>使用PageInfo对象</h4><p>在使用PageHelper.start后,我们可以使用PageInfo进行封装,可以从PageInfo中获得更多的信息,比如:当前页码,最后页码等等(详情<strong>5.3</strong>)</p><p>这里使用进行了分页封装,departmentList实际上是一个代理对象.<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageInfo pageInfo = new PageInfo(departmentList,5);</span><br></pre></td></tr></table></figure></p><h4 id="PageInfo的属性参数-成员变量"><a href="#PageInfo的属性参数-成员变量" class="headerlink" title="PageInfo的属性参数,成员变量"></a>PageInfo的属性参数,成员变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//当前页</span><br><span class="line">private int pageNum;</span><br><span class="line"> </span><br><span class="line">//每页的数量</span><br><span class="line">private int pageSize;</span><br><span class="line"> </span><br><span class="line">//当前页的数量</span><br><span class="line">private int size;</span><br><span class="line"></span><br><span class="line">//总记录数</span><br><span class="line">private long total;</span><br><span class="line"> </span><br><span class="line">//总页数</span><br><span class="line">private int pages;</span><br><span class="line"> </span><br><span class="line">//结果集(每页显示的数据)</span><br><span class="line">private List&lt;T&gt; list;</span><br><span class="line"> </span><br><span class="line">//第一页</span><br><span class="line">private int firstPage;</span><br><span class="line"> </span><br><span class="line">//前一页</span><br><span class="line">private int prePage;</span><br><span class="line"> </span><br><span class="line">//是否为第一页</span><br><span class="line">private boolean isFirstPage = false;</span><br><span class="line"> </span><br><span class="line">//是否为最后一页</span><br><span class="line">private boolean isLastPage = false;</span><br><span class="line"> </span><br><span class="line">//是否有前一页</span><br><span class="line">private boolean hasPreviousPage = false;</span><br><span class="line"> </span><br><span class="line">//是否有下一页</span><br><span class="line">private boolean hasNextPage = false;</span><br><span class="line"> </span><br><span class="line">//导航页码数</span><br><span class="line">private int navigatePages;</span><br><span class="line"> </span><br><span class="line">//所有导航页号</span><br><span class="line">private int[] navigatepageNums;</span><br></pre></td></tr></table></figure><h3 id="View层-JSP"><a href="#View层-JSP" class="headerlink" title="View层(JSP)"></a>View层(JSP)</h3><p>这里使用了<figure class="highlight plain"><figcaption><span>test</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&lt;div class=&quot;&quot; style=&quot;position: fixed;left: 500px;top: 490px;&quot;&gt;</span><br><span class="line">              当前 $&#123;pageInfo.pageNum&#125; 页,总 $&#123;pageInfo.pages&#125; 页,总 $&#123;pageInfo.total&#125; 条记录</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;&quot; style=&quot;position: fixed;right: 500px;top: 460px;&quot;&gt;</span><br><span class="line">              &lt;nav aria-label=&quot;Page navigation&quot;&gt;</span><br><span class="line">                  &lt;ul class=&quot;pagination&quot;&gt;</span><br><span class="line">                      &lt;li&gt;&lt;a href=&quot;/main/toDepartmentList.html?pn=1&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                      &lt;c:if test=&quot;$&#123;pageInfo.hasPreviousPage&#125;&quot;&gt;</span><br><span class="line">                      &lt;li&gt;</span><br><span class="line">                          &lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pageInfo.pageNum-1&#125;&quot; aria-label=&quot;Previous&quot;&gt;</span><br><span class="line">                              &lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;</span><br><span class="line">                          &lt;/a&gt;</span><br><span class="line">                      &lt;/li&gt;</span><br><span class="line">                      &lt;/c:if&gt;</span><br><span class="line">                      &lt;c:forEach items=&quot;$&#123;pageInfo.navigatepageNums&#125;&quot; var=&quot;pagenum&quot;&gt;</span><br><span class="line">                            &lt;c:if test=&quot;$&#123;pagenum == pageInfo.pageNum&#125;&quot;&gt;</span><br><span class="line">                                &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pagenum&#125;&quot;&gt;$&#123;pagenum&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;/c:if&gt;</span><br><span class="line">                            &lt;c:if test=&quot;$&#123;pagenum != pageInfo.pageNum&#125;&quot;&gt;</span><br><span class="line">                                &lt;li&gt;&lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pagenum&#125;&quot;&gt;$&#123;pagenum&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;/c:if&gt;</span><br><span class="line">                      &lt;/c:forEach&gt;</span><br><span class="line">                      &lt;c:if test=&quot;$&#123;pageInfo.hasNextPage&#125;&quot;&gt;</span><br><span class="line">                          &lt;li&gt;</span><br><span class="line">                              &lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pageInfo.pageNum+1&#125;&quot; aria-label=&quot;Next&quot;&gt;</span><br><span class="line">                                  &lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;</span><br><span class="line">                              &lt;/a&gt;</span><br><span class="line">                          &lt;/li&gt;</span><br><span class="line">                          &lt;li&gt;&lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pageInfo.pages&#125;&quot;&gt;末页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                      &lt;/c:if&gt;</span><br><span class="line">                  &lt;/ul&gt;</span><br><span class="line">              &lt;/nav&gt;</span><br><span class="line">          &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h1 id="demo截图"><a href="#demo截图" class="headerlink" title="demo截图"></a>demo截图</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/07/17/ZOuKRP.jpg" alt="ZOuKRP.jpg" title>                </div>                <div class="image-caption">ZOuKRP.jpg</div>            </figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>第一次写笔记,感觉自己还是做的很不够,思路不够清晰,写的不太好也写的太慢…</p><p>希望自己能够在以后写的越来越好.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/07/17/ZOM3Nj.jpg" alt="可爱的猫猫" title>                </div>                <div class="image-caption">可爱的猫猫</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/study/java/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客备份</title>
    <link href="http://yoursite.com/2019/07/17/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/2019/07/17/Hexo博客备份/</id>
    <published>2019-07-17T03:49:15.000Z</published>
    <updated>2019-08-04T12:45:10.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于hexo博客备份"><a href="#关于hexo博客备份" class="headerlink" title="关于hexo博客备份"></a>关于hexo博客备份</h2><p>使用 Hexo 在 GitHub Pages 搭建博客时，博客作为一个单独的 GitHub 仓库存在，但是这个仓库只有生成的静态网页文件，并没有 Hexo 的源文件。这样一来换电脑或者重装系统后，再想找回源文件就比较麻烦了，这里推荐一种比较完美的方法解决备份问题。</p><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><ol><li>创建仓库 WincerChan.github.io，如果同名仓库之前已经创建，请将之前的仓库改名新建的仓库必须是 Username.github.io（如果你是将 Hexo 博客部署到了自己的服务器，那么仓库名可以随意设置，我这里就是随意设置的仓库）</li><li>创建两个分支：master 和 hexo；</li><li>设置 hexo 为默认分支</li><li>将刚刚创建的新仓库 clone 至本地，将之前的 hexo 文件夹中的 _config.yml、themes/、source/、scaffolds/、package.json 和 .gitignore 复制至 WincerChan.github.io 文件夹</li><li>将 themes/next/（我用的是 NexT 主题）中的 .git/ 删除，否则无法将主题文件夹 push（也可以将主题文件夹使用子模块的方式添加到该仓库)</li><li>在 WincerChan.github.io 文件夹执行 npm install 和 npm install hexo-deployer-git（这里可以看一看分支是不是显示为 hexo）</li><li>执行 git add、git commit -m “”、git push origin hexo 来提交 hexo 网站源文件；</li><li>执行 hexo g -d 生成静态网页部署至 Github 上</li></ol><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><ol><li>依次执行 git add、git commit -m “” 和 git push origin hexo 来提交 hexo 网站源文件</li><li>执行 hexo g -d 生成静态网页部署至 Github 上</li></ol><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><ol><li>安装 git</li><li>安装Nodejs和npm</li><li>使用 git clone git#github.com:WincerChan/WincerChan.github.io.git 将仓库拷贝至本地</li><li>在文件夹内执行以下命令 npm install hexo-cli -g、npm install、npm install hexo-deployer-git</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git basic command</title>
    <link href="http://yoursite.com/2019/07/17/git-basic-command/"/>
    <id>http://yoursite.com/2019/07/17/git-basic-command/</id>
    <published>2019-07-17T02:59:21.000Z</published>
    <updated>2019-07-18T03:08:59.552Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>###Git 基本命令</p><hr><h4 id="git-init-命令把这个目录变成Git可以管理的仓库"><a href="#git-init-命令把这个目录变成Git可以管理的仓库" class="headerlink" title="git init (命令把这个目录变成Git可以管理的仓库)"></a><strong>git init</strong> (命令把这个目录变成Git可以管理的仓库)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure><h4 id="git-add-将文件添加到仓库"><a href="#git-add-将文件添加到仓库" class="headerlink" title="git add (将文件添加到仓库)"></a><strong>git add</strong> (将文件添加到仓库)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br></pre></td></tr></table></figure><h4 id="git-commit-将文件提交到仓库"><a href="#git-commit-将文件提交到仓库" class="headerlink" title="git commit (将文件提交到仓库)"></a><strong>git commit</strong> (将文件提交到仓库)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p>(这里git commit -m “这里是添加本次提交的说明”<br>git add 是可以添加多个文件,而git commit是可以一次提交多个的)</p><h4 id="git-status-查看当前仓库的状态"><a href="#git-status-查看当前仓库的状态" class="headerlink" title="git status (查看当前仓库的状态)"></a><strong>git status</strong> (查看当前仓库的状态)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>(这里表示readme.txt是已经修改了,但是还没有提交修改)</p><h4 id="git-diff-查看不同-difference"><a href="#git-diff-查看不同-difference" class="headerlink" title="git diff (查看不同(difference))"></a><strong>git diff</strong> (查看不同(difference))</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system.</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line"> Git is free software.</span><br></pre></td></tr></table></figure><h4 id="git-log-命令显示从最近到最远的提交日志"><a href="#git-log-命令显示从最近到最远的提交日志" class="headerlink" title="git log (命令显示从最近到最远的提交日志)"></a><strong>git log</strong> (命令显示从最近到最远的提交日志)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p>(如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty=oneline参数：)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/categories/study/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/25/hello-world/"/>
    <id>http://yoursite.com/2019/06/25/hello-world/</id>
    <published>2019-06-25T03:36:04.338Z</published>
    <updated>2019-07-17T02:55:04.711Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
