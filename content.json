[{"title":"学习笔记:Mybatis-PageHelper","date":"2019-07-17T12:04:14.000Z","path":"2019/07/17/Mybatis之Pagehelper/","text":"前言Mybatis为我们提供了非常优秀的分页插件PageHelper该插件支持任何复杂的单表或者是多表. PageHelper实现了通用的分页查询,支持的数据有mysql,Oracle,DB2,PostgreSQL等该插件托管于github: https://github.com/pagehelper/Mybatis-PageHelper如何使用PageHelper导入依赖- 使用maven导入12345678910&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;3.4.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt; &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt; &lt;version&gt;0.9.1&lt;/version&gt;&lt;/dependency&gt; 导入jar包1). 你可以从下面的地址中下载最新版本的 jar 包 https://oss.sonatype.org/content/repositories/releases/com/github/pagehelper/pagehelper/ http://repo1.maven.org/maven2/com/github/pagehelper/pagehelper/ 2). 由于使用了sql 解析工具，你还需要下载 jsqlparser.jar： http://repo1.maven.org/maven2/com/github/jsqlparser/jsqlparser/0.9.5/配置拦截器插件特别注意，新版拦截器是 com.github.pagehelper.PageInterceptor com.github.pagehelper.PageHelper 现在是一个特殊的 dialect 实现类，是分页插件的默认实现类，提供了和以前相同的用法。 在Mybatis配置xml中配置拦截器插件123456&lt;plugins&gt; &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;!--分页参数合理化 --&gt; &lt;property name=&quot;reasonable&quot; value=&quot;true&quot;/&gt; &lt;/plugin&gt; &lt;/plugins&gt; 在Spring配置文件中配置拦截器插件使用 spring 的属性配置方式，可以使用 plugins 属性像下面这样配置： 123456789101112131415&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;!-- 注意其他配置 --&gt; &lt;property name=&quot;plugins&quot;&gt; &lt;array&gt; &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;property name=&quot;properties&quot;&gt; &lt;!--使用下面的方式配置参数，一行配置一个 --&gt; &lt;value&gt; params=value1 &lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/array&gt; &lt;/property&gt;&lt;/bean&gt; 确确实实去配置文件会让人显得很郁闷也很头疼. 所以我一般参照官方文档去配置,里面不仅有分页插件的参数介绍还有常用的配置参数,不同的场景需要配置不同的参数. 参考PageHelper官方文档 DAO层在我做的demo中,我是获取所有部门然后在使用分页插件进行物理分页. 1234public interface DepartmentMapper &#123; //获取所有部门 List&lt;Department&gt; getAll();&#125; Service层1234public interface DepartmentService &#123;//查询所有 List&lt;Department&gt; getAll();&#125; 实现相应的接口 12345678910@Servicepublic class DepartmentServiceImpl implements DepartmentService &#123; @Autowired DepartmentMapper departmentMapper; @Override public List&lt;Department&gt; getAll() &#123; return departmentMapper.getAll(); &#125;&#125; Controller层在控制器中,是跳转到部门的页面的时候将数据查询到然后使用PageHelper 1234567891011121314151617181920212223242526272829303132/** * @project : HRM * @description : 控制器-首页管理 * @author : zy */@Controller@RequestMapping(&quot;main&quot;)public class MainController &#123; @Autowired UserService userService; @Autowired DepartmentService departmentService; @Autowired EmployeeService employeeService; /** * @decription 查询所有部门信息并跳转到部门信息页面(分页查询) * @param model * @return */ @RequestMapping(&quot;toDepartmentList.html&quot;) public String toDepartmentList(@RequestParam(value = &quot;pn&quot;, defaultValue = &quot;1&quot;) Integer pn, Model model)&#123; //pn为当前页码,每页的大小为5 PageHelper.startPage(pn,5); List&lt;Department&gt; departmentList = departmentService.getAll(); //导航栏最多为5页 PageInfo pageInfo = new PageInfo(departmentList,5); model.addAttribute(&quot;pageInfo&quot;,pageInfo); return &quot;Dep/DepartmentList&quot;;&#125;&#125; 使用PageHelper的静态方法:PageHelper.startPage(currentPage,PageSize)(currentPage是指的当前页数PageSize是指的是每页的大小) 使用PageInfo对象在使用PageHelper.start后,我们可以使用PageInfo进行封装,可以从PageInfo中获得更多的信息,比如:当前页码,最后页码等等(详情5.3) 这里使用进行了分页封装,departmentList实际上是一个代理对象. 1PageInfo pageInfo = new PageInfo(departmentList,5); PageInfo的属性参数,成员变量1234567891011121314151617181920212223242526272829303132333435363738394041//当前页private int pageNum; //每页的数量private int pageSize; //当前页的数量private int size;//总记录数private long total; //总页数private int pages; //结果集(每页显示的数据)private List&lt;T&gt; list; //第一页private int firstPage; //前一页private int prePage; //是否为第一页private boolean isFirstPage = false; //是否为最后一页private boolean isLastPage = false; //是否有前一页private boolean hasPreviousPage = false; //是否有下一页private boolean hasNextPage = false; //导航页码数private int navigatePages; //所有导航页号private int[] navigatepageNums; View层(JSP)这里使用了test12345678910111213141516171819202122232425262728293031323334```&lt;div class=&quot;&quot; style=&quot;position: fixed;left: 500px;top: 490px;&quot;&gt; 当前 $&#123;pageInfo.pageNum&#125; 页,总 $&#123;pageInfo.pages&#125; 页,总 $&#123;pageInfo.total&#125; 条记录 &lt;/div&gt; &lt;div class=&quot;&quot; style=&quot;position: fixed;right: 500px;top: 460px;&quot;&gt; &lt;nav aria-label=&quot;Page navigation&quot;&gt; &lt;ul class=&quot;pagination&quot;&gt; &lt;li&gt;&lt;a href=&quot;/main/toDepartmentList.html?pn=1&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;c:if test=&quot;$&#123;pageInfo.hasPreviousPage&#125;&quot;&gt; &lt;li&gt; &lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pageInfo.pageNum-1&#125;&quot; aria-label=&quot;Previous&quot;&gt; &lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/c:if&gt; &lt;c:forEach items=&quot;$&#123;pageInfo.navigatepageNums&#125;&quot; var=&quot;pagenum&quot;&gt; &lt;c:if test=&quot;$&#123;pagenum == pageInfo.pageNum&#125;&quot;&gt; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pagenum&#125;&quot;&gt;$&#123;pagenum&#125;&lt;/a&gt;&lt;/li&gt; &lt;/c:if&gt; &lt;c:if test=&quot;$&#123;pagenum != pageInfo.pageNum&#125;&quot;&gt; &lt;li&gt;&lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pagenum&#125;&quot;&gt;$&#123;pagenum&#125;&lt;/a&gt;&lt;/li&gt; &lt;/c:if&gt; &lt;/c:forEach&gt; &lt;c:if test=&quot;$&#123;pageInfo.hasNextPage&#125;&quot;&gt; &lt;li&gt; &lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pageInfo.pageNum+1&#125;&quot; aria-label=&quot;Next&quot;&gt; &lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/main/toDepartmentList.html?pn=$&#123;pageInfo.pages&#125;&quot;&gt;末页&lt;/a&gt;&lt;/li&gt; &lt;/c:if&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/div&gt; demo截图 ZOuKRP.jpg 结尾第一次写笔记,感觉自己还是做的很不够,思路不够清晰,写的不太好也写的太慢… 希望自己能够在以后写的越来越好. ZOM3Nj.jpg","tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://yoursite.com/tags/Mybatis/"}]},{"title":"Hexo博客备份","date":"2019-07-17T03:49:15.000Z","path":"2019/07/17/Hexo博客备份/","text":"关于hexo博客备份使用 Hexo 在 GitHub Pages 搭建博客时，博客作为一个单独的 GitHub 仓库存在，但是这个仓库只有生成的静态网页文件，并没有 Hexo 的源文件。这样一来换电脑或者重装系统后，再想找回源文件就比较麻烦了，这里推荐一种比较完美的方法解决备份问题。 备份 创建仓库 WincerChan.github.io，如果同名仓库之前已经创建，请将之前的仓库改名新建的仓库必须是 Username.github.io（如果你是将 Hexo 博客部署到了自己的服务器，那么仓库名可以随意设置，我这里就是随意设置的仓库） 创建两个分支：master 和 hexo； 设置 hexo 为默认分支 将刚刚创建的新仓库 clone 至本地，将之前的 hexo 文件夹中的 _config.yml、themes/、source/、scaffolds/、package.json 和 .gitignore 复制至 WincerChan.github.io 文件夹 将 themes/next/（我用的是 NexT 主题）中的 .git/ 删除，否则无法将主题文件夹 push（也可以将主题文件夹使用子模块的方式添加到该仓库) 在 WincerChan.github.io 文件夹执行 npm install 和 npm install hexo-deployer-git（这里可以看一看分支是不是显示为 hexo） 执行 git add、git commit -m “”、git push origin hexo 来提交 hexo 网站源文件； 执行 hexo g -d 生成静态网页部署至 Github 上 修改 依次执行 git add、git commit -m “” 和 git push origin hexo 来提交 hexo 网站源文件 执行 hexo g -d 生成静态网页部署至 Github 上 恢复 安装 git 安装Nodejs和npm 使用 git clone git#github.com:WincerChan/WincerChan.github.io.git 将仓库拷贝至本地 在文件夹内执行以下命令 npm install hexo-cli -g、npm install、npm install hexo-deployer-git","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"git basic command","date":"2019-07-17T02:59:21.000Z","path":"2019/07/17/git-basic-command/","text":"###Git 基本命令 git init (命令把这个目录变成Git可以管理的仓库)12$ git initInitialized empty Git repository in /Users/michael/learngit/.git/ git add (将文件添加到仓库)1git add readme.txt git commit (将文件提交到仓库)1234$ git commit -m &quot;wrote a readme file&quot;[master (root-commit) eaadf4e] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt (这里git commit -m “这里是添加本次提交的说明”git add 是可以添加多个文件,而git commit是可以一次提交多个的) git status (查看当前仓库的状态)123456789$ git statusOn branch masterChanges not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: readme.txtno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) (这里表示readme.txt是已经修改了,但是还没有提交修改) git diff (查看不同(difference))123456789$ git diff readme.txt diff --git a/readme.txt b/readme.txtindex 46d49bf..9247db6 100644--- a/readme.txt+++ b/readme.txt@@ -1,2 +1,2 @@-Git is a version control system.+Git is a distributed version control system. Git is free software. git log (命令显示从最近到最远的提交日志)123456789101112131415161718$ git logcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Fri May 18 21:06:15 2018 +0800 append GPLcommit e475afc93c209a690c39c13a46716e8fa000c366Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Fri May 18 21:03:36 2018 +0800 add distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Fri May 18 20:59:18 2018 +0800 wrote a readme file (如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty=oneline参数：) 1234$ git log --pretty=oneline1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPLe475afc93c209a690c39c13a46716e8fa000c366 add distributedeaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"Hello World","date":"2019-06-25T03:36:04.338Z","path":"2019/06/25/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]